import { EventEmitter } from '../../stencil-public-runtime';
import { EchoOptions, ConnectionOptions, SQLiteOptions, SQLiteExecuteOptions, SQLiteQueryOptions, SQLiteRunOptions, SQLiteSetOptions, SQLiteTableOptions, SQLiteSyncDateOptions, SQLiteImportOptions, SQLiteExportOptions, SQLiteUpgradeOptions, AllConnectionsOptions, EchoResult, SQLiteChanges, SQLiteResult, SQLiteValues, SQLiteSyncDate, SQLiteJson, JsonProgressListener, SQLiteVersion, SQLiteFromAssetsOptions, SQLiteHTTPOptions, HTTPRequestEndedListener, PickOrSaveDatabaseEndedListener, SQLiteLocalDiskOptions, ButtonOptions } from '../../interfaces/interfaces';
export declare class JeepSqlite {
    el: HTMLJeepSqliteElement;
    /**
     * AutoSave
     */
    autoSave: boolean;
    /**
     * in use with TypeOrm
     */
    typeOrm: boolean;
    /**
     * WasmPath
     */
    wasmPath: string;
    /**
     * Pick Button Text
     */
    pickText: string;
    /**
     * Save Button Text
     */
    saveText: string;
    /**
     * Button Options
     */
    buttonOptions: string;
    innerAutoSave: boolean;
    innerTypeOrm: boolean;
    innerWasmPath: string;
    innerPickText: string;
    innerSaveText: string;
    innerButtonOptions: ButtonOptions;
    parseAutoSave(newValue: boolean): void;
    parseTypeOrm(newValue: boolean): void;
    parseWasmPath(newValue: string): void;
    parsePickText(newValue: string): void;
    parseSaveText(newValue: string): void;
    parseButtonOptions(newValue: string): void;
    importProgress: EventEmitter<JsonProgressListener>;
    exportProgress: EventEmitter<JsonProgressListener>;
    HTTPRequestEnded: EventEmitter<HTTPRequestEndedListener>;
    PickDatabaseEnded: EventEmitter<PickOrSaveDatabaseEndedListener>;
    SaveDatabaseEnded: EventEmitter<PickOrSaveDatabaseEndedListener>;
    echo(options: EchoOptions): Promise<EchoResult>;
    createConnection(options: ConnectionOptions): Promise<void>;
    isConnection(options: SQLiteOptions): Promise<SQLiteResult>;
    closeConnection(options: SQLiteOptions): Promise<void>;
    open(options: SQLiteOptions): Promise<void>;
    close(options: SQLiteOptions): Promise<void>;
    getVersion(options: SQLiteOptions): Promise<SQLiteVersion>;
    beginTransaction(options: SQLiteOptions): Promise<SQLiteChanges>;
    commitTransaction(options: SQLiteOptions): Promise<SQLiteChanges>;
    rollbackTransaction(options: SQLiteOptions): Promise<SQLiteChanges>;
    isTransactionActive(options: SQLiteOptions): Promise<SQLiteResult>;
    execute(options: SQLiteExecuteOptions): Promise<SQLiteChanges>;
    executeSet(options: SQLiteSetOptions): Promise<SQLiteChanges>;
    run(options: SQLiteRunOptions): Promise<SQLiteChanges>;
    query(options: SQLiteQueryOptions): Promise<SQLiteValues>;
    getTableList(options: SQLiteOptions): Promise<SQLiteValues>;
    isDBExists(options: SQLiteOptions): Promise<SQLiteResult>;
    isDBOpen(options: SQLiteOptions): Promise<SQLiteResult>;
    deleteDatabase(options: SQLiteOptions): Promise<void>;
    isStoreOpen(): Promise<boolean>;
    copyFromAssets(options: SQLiteFromAssetsOptions): Promise<void>;
    isTableExists(options: SQLiteTableOptions): Promise<SQLiteResult>;
    createSyncTable(options: SQLiteOptions): Promise<SQLiteChanges>;
    getSyncDate(options: SQLiteSyncDateOptions): Promise<SQLiteSyncDate>;
    setSyncDate(options: SQLiteSyncDateOptions): Promise<void>;
    isJsonValid(options: SQLiteImportOptions): Promise<SQLiteResult>;
    importFromJson(options: SQLiteImportOptions): Promise<SQLiteChanges>;
    exportToJson(options: SQLiteExportOptions): Promise<SQLiteJson>;
    deleteExportedRows(options: SQLiteOptions): Promise<void>;
    addUpgradeStatement(options: SQLiteUpgradeOptions): Promise<void>;
    isDatabase(options: SQLiteOptions): Promise<SQLiteResult>;
    getDatabaseList(): Promise<SQLiteValues>;
    checkConnectionsConsistency(options: AllConnectionsOptions): Promise<SQLiteResult>;
    saveToStore(options: SQLiteOptions): Promise<void>;
    saveToLocalDisk(options: SQLiteOptions): Promise<void>;
    getFromLocalDiskToStore(options: SQLiteLocalDiskOptions): Promise<void>;
    getFromHTTPRequest(options: SQLiteHTTPOptions): Promise<void>;
    private store;
    private storeName;
    private isStore;
    private _dbDict;
    private databaseList;
    private _versionUpgrades;
    private _element;
    private _blob;
    private _opts;
    private _buttonSaveEl;
    private _buttonPickEl;
    private _overwrite;
    connectedCallback(): void;
    componentWillLoad(): void;
    componentDidLoad(): Promise<void>;
    private _createConnection;
    private _isConnection;
    private _closeConnection;
    private _open;
    private _close;
    private _saveToStore;
    private _saveToLocalDisk;
    _getFromLocalDiskToStore(overwrite: boolean): Promise<void>;
    private pickDatabase;
    private saveFile;
    private _getVersion;
    private _beginTransaction;
    private _commitTransaction;
    private _rollbackTransaction;
    private _isTransactionActive;
    private _execute;
    private _executeSet;
    private _run;
    private _query;
    private _getTableList;
    private _isDBExists;
    private _isDBOpen;
    private _deleteDatabase;
    private _isTableExists;
    private _createSyncTable;
    private _getSyncDate;
    private _setSyncDate;
    _isJsonValid(jsonStrObj: string): Promise<SQLiteResult>;
    _importFromJson(jsonStrObj: string): Promise<SQLiteChanges>;
    _exportToJson(database: string, exportMode: string, readonly: boolean): Promise<SQLiteJson>;
    _deleteExportedRows(database: string, readonly: boolean): Promise<void>;
    _copyFromAssets(overwrite: boolean): Promise<void>;
    _getFromHTTPRequest(url: string, overwrite: boolean): Promise<void>;
    _isDatabase(database: string): Promise<SQLiteResult>;
    _getDatabaseList(): Promise<SQLiteValues>;
    _checkConnectionsConsistency(dbNames: string[], openModes: string[]): Promise<SQLiteResult>;
    private _resetDbDict;
    private symmetricDifference;
    private unzipDatabase;
    private retrieveDBFromZip;
    private copyDatabase;
    private loadJSON;
    private openStore;
    private setConfig;
    private removePathSuffix;
    private setPathSuffix;
    private blob2uint;
    private uint2blob;
    render(): void;
}
