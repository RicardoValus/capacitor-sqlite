import { EventEmitter } from '../stencil-public-runtime';
import { SQLiteSet, JsonSQLite, SQLiteVersionUpgrade, JsonProgressListener } from '../interfaces/interfaces';
export declare class Database {
    private _isDBOpen;
    private dbName;
    private store;
    private version;
    mDb: any;
    private vUpgDict;
    private autoSave;
    private wasmPath;
    private isBackup;
    private isTransactionActive;
    constructor(databaseName: string, version: number, upgDict: Record<number, SQLiteVersionUpgrade>, store: LocalForage, autoSave: boolean, wasmPath: string);
    open(): Promise<void>;
    isDBOpen(): boolean;
    close(): Promise<void>;
    saveToStore(setFK?: boolean): Promise<void>;
    exportDB(): Promise<Uint8Array>;
    getVersion(): Promise<number>;
    isDBExists(database: string): Promise<boolean>;
    deleteDB(database: string): Promise<void>;
    beginTransaction(): Promise<number>;
    commitTransaction(): Promise<number>;
    rollbackTransaction(): Promise<number>;
    isTransActive(): boolean;
    setIsTransActive(value: boolean): void;
    executeSQL(sql: string, transaction?: boolean): Promise<number>;
    execSet(set: SQLiteSet[], transaction?: boolean, returnMode?: string): Promise<any>;
    selectSQL(sql: string, values: string[]): Promise<any[]>;
    runSQL(statement: string, values: any[], transaction: boolean, returnMode: string): Promise<any>;
    getTableNames(): Promise<any[]>;
    isTable(tableName: string): Promise<boolean>;
    createSyncTable(): Promise<number>;
    getSyncDate(): Promise<number>;
    setSyncDate(syncDate: string): Promise<any>;
    importJson(jsonData: JsonSQLite, importProgress: EventEmitter<JsonProgressListener>): Promise<any>;
    exportJson(mode: string, exportProgress: EventEmitter<JsonProgressListener>): Promise<any>;
    deleteExportedRows(): Promise<void>;
}
