{"version":3,"file":"utils-drop.js","sourceRoot":"","sources":["../../src/utils/utils-drop.ts"],"names":[],"mappings":"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","sourcesContent":["import { UtilsSQLite } from './utils-sqlite';\n\nexport class UtilsDrop {\n\n  static async getTablesNames(db: any): Promise<string[]> {\n    let sql = 'SELECT name FROM sqlite_master WHERE ';\n    sql += \"type='table' AND name NOT LIKE 'sync_table' \";\n    sql += \"AND name NOT LIKE '_temp_%' \";\n    sql += \"AND name NOT LIKE 'sqlite_%' \";\n    sql += \"ORDER BY rootpage DESC;\";\n\n    const retArr: string[] = [];\n    try {\n      const retQuery: any[] = await UtilsSQLite.queryAll(db, sql, []);\n      for (const query of retQuery) {\n        retArr.push(query.name);\n      }\n      return Promise.resolve(retArr);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTablesNames: ${err.message}`));\n    }\n  }\n  static async  getViewsNames(mDb: any): Promise<string[]> {\n      let sql = 'SELECT name FROM sqlite_master WHERE ';\n      sql += \"type='view' AND name NOT LIKE 'sqlite_%' \";\n      sql += 'ORDER BY rootpage DESC;';\n      const retArr: string[] = [];\n      try {\n        const retQuery: any[] = await UtilsSQLite.queryAll(mDb, sql, []);\n        for (const query of retQuery) {\n          retArr.push(query.name);\n        }\n        return Promise.resolve(retArr);\n      } catch (err) {\n        return Promise.reject(new Error(`getViewsNames: ${err.message}`));\n      }\n  }\n  static async  dropElements(db: any, type: string): Promise<void> {\n    let msg = '';\n    let stmt1 = `AND name NOT LIKE ('sqlite_%')`;\n    switch (type) {\n      case 'index':\n        msg = 'DropIndexes';\n        break;\n      case 'trigger':\n        msg = 'DropTriggers';\n        break;\n      case 'table':\n        msg = 'DropTables';\n        stmt1 += ` AND name NOT IN ('sync_table')`;\n        break;\n      case 'view':\n        msg = 'DropViews';\n        break;\n      default:\n        return Promise.reject(\n          new Error(`DropElements: ${type} ` + 'not found'),\n        );\n    }\n    // get the element's names\n    let stmt = 'SELECT name FROM sqlite_master WHERE ';\n    stmt += `type = '${type}' ${stmt1};`;\n    try {\n      const elements: any[] = await UtilsSQLite.queryAll(db, stmt, []);\n      if (elements.length > 0) {\n        const upType: string = type.toUpperCase();\n        const statements: string[] = [];\n        for (const elem of elements) {\n          let stmt = `DROP ${upType} IF EXISTS `;\n          stmt += `${elem.name};`;\n          statements.push(stmt);\n        }\n        for (const stmt of statements) {\n          const lastId: number = await UtilsSQLite.run(db, stmt, [], false, 'no');\n          if (lastId < 0) {\n            return Promise.reject(new Error(`DropElements: ${msg}: lastId < 0`));\n          }\n        }\n      }\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`DropElements: ${msg}: ${err.message}`));\n    }\n  }\n  static async  dropAll(db: any): Promise<void> {\n    try {\n      // drop tables\n      await UtilsDrop.dropElements(db, 'table');\n      // drop indexes\n      await UtilsDrop.dropElements(db, 'index');\n      // drop triggers\n      await UtilsDrop.dropElements(db, 'trigger');\n      // drop views\n      await UtilsDrop.dropElements(db, 'view');\n      // vacuum the database\n      await UtilsSQLite.run(db, 'VACUUM;', [], false, 'no');\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`DropAll: ${err.message}`));\n    }\n  }\n  static async  dropTempTables(db: any, alterTables: Record<string, string[]>): Promise<void>{\n    const tempTables: string[] = Object.keys(alterTables);\n    const statements: string[] = [];\n    for (const tTable of tempTables) {\n      let stmt = 'DROP TABLE IF EXISTS ';\n      stmt += `_temp_${tTable};`;\n      statements.push(stmt);\n    }\n    try {\n      const changes: number = await UtilsSQLite.execute(db, statements.join('\\n'), false);\n      if (changes < 0) {\n        return Promise.reject(new Error('DropTempTables: changes < 0'));\n      }\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`DropTempTables: ${err.message}`));\n    }\n  }\n}\n"]}