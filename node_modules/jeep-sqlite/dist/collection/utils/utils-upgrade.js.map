{"version":3,"file":"utils-upgrade.js","sourceRoot":"","sources":["../../src/utils/utils-upgrade.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,MAAM,OAAO,YAAY;IACvB,MAAM,CAAC,KAAK,CAAC,SAAS,CACE,GAAa,EACb,QAA8C,EAC9C,UAAkB,EAClB,aAAqB;QAE3C,IAAI,OAAO,GAAW,CAAC,CAAC,CAAC;QACzB,MAAM,UAAU,GAAe,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aAClE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;aAC5B,IAAI,EAAE,CAAC;QAER,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE,CAAC;YACpC,IAAI,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,aAAa,EAAE,CAAC;gBAC3D,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;gBACnD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;gBAC3D,CAAC;gBACD,IAAI,CAAC;oBACH,uBAAuB;oBACvB,MAAM,WAAW,CAAC,+BAA+B,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBAClE,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACzD,MAAM,YAAY,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oBAC7D,MAAM,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oBAClD,sBAAsB;oBACtB,MAAM,WAAW,CAAC,+BAA+B,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBACjE,OAAO,GAAG,CAAC,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;gBACjE,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAChE,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAAA,CAAC;IAEF,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,GAAa,EAAE,UAAoB;QACvE,IAAI,CAAC;YACH,MAAM,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAClD,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAE3B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;gBACnC,MAAM,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,CAAC;YACD,MAAM,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACnD,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,WAAW,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACrD,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;CACF","sourcesContent":["import { SQLiteVersionUpgrade } from '../interfaces/interfaces';\nimport { UtilsSQLite } from '../utils/utils-sqlite';\nimport { Database } from './database';\n\nexport class UtilsUpgrade {\n  static async onUpgrade(\n                          mDB: Database,\n                          vUpgDict: Record<number, SQLiteVersionUpgrade>,\n                          curVersion: number,\n                          targetVersion: number\n                        ): Promise<number> {\n    let changes: number = -1;\n    const sortedKeys: Int32Array = new Int32Array(Object.keys(vUpgDict)\n    .map(item => parseInt(item)))\n    .sort();\n\n    for (const versionKey of sortedKeys) {\n      if (versionKey > curVersion && versionKey <= targetVersion) {\n        const statements = vUpgDict[versionKey].statements;\n        if (statements.length === 0) {\n          return Promise.reject('onUpgrade: statements not given');\n        }\n        try {\n          // set Foreign Keys Off\n          await UtilsSQLite.setForeignKeyConstraintsEnabled(mDB.mDb, false);\n          const initChanges = await UtilsSQLite.dbChanges(mDB.mDb);\n          await UtilsUpgrade.executeStatementsProcess(mDB, statements);\n          await UtilsSQLite.setVersion(mDB.mDb, versionKey);\n          // set Foreign Keys On\n          await UtilsSQLite.setForeignKeyConstraintsEnabled(mDB.mDb, true);\n          changes = (await UtilsSQLite.dbChanges(mDB.mDb)) - initChanges;\n        } catch (err) {\n          return Promise.reject(new Error(`onUpgrade: ${err.message}`));\n        }\n      }\n    }\n\n    return Promise.resolve(changes);\n  };\n\n  static async executeStatementsProcess(mDB: Database, statements: string[]): Promise<void> {\n    try {\n      await UtilsSQLite.beginTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(true);\n\n      for (const statement of statements) {\n        await UtilsSQLite.execute(mDB.mDb, statement, false);\n      }\n      await UtilsSQLite.commitTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(false);\n      return Promise.resolve();\n    } catch (err) {\n      await UtilsSQLite.rollbackTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(false);\n      return Promise.reject(`ExecuteStatementProcess: ${err}`);\n    }\n  }\n}\n"]}