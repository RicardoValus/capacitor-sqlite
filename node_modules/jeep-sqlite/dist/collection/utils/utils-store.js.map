{"version":3,"file":"utils-store.js","sourceRoot":"","sources":["../../src/utils/utils-store.ts"],"names":[],"mappings":"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","sourcesContent":["export class UtilsStore {\n  static async getDBFromStore(dbName: string, store: LocalForage): Promise<Uint8Array> {\n    try {\n      const retDb: Uint8Array = await store.getItem(dbName);\n      return Promise.resolve(retDb);\n    } catch (err) {\n      return Promise.reject(`GetDBFromStore: ${err.message}`);\n    }\n  }\n  static async setInitialDBToStore(dbName: string, store: LocalForage): Promise<void> {\n    try {\n      // export the database\n      const data = null;\n      // store the database\n      await store.setItem(dbName, data);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`SetInitialDBToStore: ${err.message}`);\n    }\n  }\n  static async setDBToStore(mDb: any, dbName: string, store: LocalForage): Promise<void> {\n    try {\n      // export the database\n      const data: Uint8Array = mDb.export();\n      // store the database\n      await UtilsStore.saveDBToStore(dbName, data, store);\n\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`SetDBToStore: ${err.message}`);\n    }\n  }\n  static async saveDBToStore(dbName: string, data: Uint8Array, store: LocalForage): Promise<void> {\n    try {\n      // store the database\n      await store.setItem(dbName, data);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`SaveDBToStore: ${err.message}`);\n    }\n  }\n  static async removeDBFromStore(dbName: string, store: LocalForage): Promise<void> {\n    try {\n      await store.removeItem(dbName);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`RemoveDBFromStore: ${err.message}`);\n    }\n  }\n  static async isDBInStore(dbName: string, store: LocalForage): Promise<boolean> {\n    try {\n      const retDb: Uint8Array = await store.getItem(dbName);\n      if(retDb != null && retDb.length > 0) {\n        return Promise.resolve(true);\n      } else {\n        return Promise.resolve(false);\n      }\n  } catch (err) {\n      return Promise.reject(`IsDBInStore: ${err}`);\n    }\n  }\n  static async restoreDBFromStore(dbName: string, prefix: string, store: LocalForage): Promise<void> {\n    const mFileName = `${prefix}-${dbName}`;\n    try {\n      // check if file exists\n      const isFilePre: boolean = await UtilsStore.isDBInStore(mFileName, store);\n      if (isFilePre) {\n        const isFile: boolean = await UtilsStore.isDBInStore(dbName, store);\n        if (isFile) {\n          const retDb = await UtilsStore.getDBFromStore(mFileName, store);\n          await UtilsStore.saveDBToStore(dbName, retDb, store);\n          await UtilsStore.removeDBFromStore(mFileName, store);\n          return Promise.resolve();\n        } else {\n          return Promise.reject(\n            new Error(`RestoreDBFromStore: ${dbName} does not exist`));\n        }\n      } else {\n        return Promise.reject(\n          new Error(`RestoreDBFromStore: ${mFileName} does not exist`));\n      }\n    } catch (err) {\n      return Promise.reject(`RestoreDBFromStore: ${err.message}`);\n    }\n  }\n  static async copyDBToStore(dbName: string, toDb: string, store: LocalForage): Promise<void> {\n    try {\n      // check if file exists\n      const isFile: boolean = await UtilsStore.isDBInStore(dbName, store);\n      if (isFile) {\n        const retDb = await UtilsStore.getDBFromStore(dbName, store);\n        await UtilsStore.saveDBToStore(toDb, retDb, store);\n        return Promise.resolve();\n      } else {\n        return Promise.reject(\n          new Error(`CopyDBToStore: ${dbName} does not exist`));\n      }\n    } catch (err) {\n      return Promise.reject(`CopyDBToStore: ${err.message}`);\n    }\n  }\n  static async getDBListFromStore(store: LocalForage): Promise<string[]> {\n    try {\n      const retDbList: string[] = await store.keys();\n      return Promise.resolve(retDbList);\n    } catch (err) {\n      return Promise.reject(`GetDBListFromStore: ${err.message}`);\n    }\n  }\n}\n"]}