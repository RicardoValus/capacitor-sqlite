{"version":3,"file":"utils-importJson.js","sourceRoot":"","sources":["../../src/utils/utils-importJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@stencil/core';\n\nimport { JsonSQLite, JsonProgressListener, JsonView } from '../interfaces/interfaces';\nimport { UtilsSQLite } from './utils-sqlite';\nimport { UtilsDrop } from './utils-drop';\nimport { UtilsJSON } from './utils-json';\nimport { Database } from './database';\n\nexport class UtilsImportJSON {\n  static async createDatabaseSchema(mDB: Database, jsonData: JsonSQLite): Promise<number> {\n    let changes = -1;\n    const version: number = jsonData.version;\n    try {\n        // set User Version PRAGMA\n        await UtilsSQLite.setVersion(mDB.mDb, version);\n        // DROP ALL when mode=\"full\"\n        if (jsonData.mode === 'full') {\n          await UtilsDrop.dropAll(mDB.mDb);\n        }\n        // create database schema\n        changes = await UtilsImportJSON.createSchema(mDB, jsonData);\n        return Promise.resolve(changes);\n\n    } catch (err) {\n      return Promise.reject(\n        new Error('CreateDatabaseSchema: ' + `${err.message}`),\n      );\n    }\n  }\n  static async createSchema(mDB: Database, jsonData: any): Promise<number> {\n    // create the database schema\n    let changes = 0;\n    const db = mDB.mDb\n    try {\n      // start a transaction\n      await UtilsSQLite.beginTransaction(db, true);\n      mDB.setIsTransActive(true);\n    } catch (err) {\n      return Promise.reject(new Error(`CreateSchema: ${err.message}`));\n    }\n\n    const stmts = await UtilsImportJSON.createSchemaStatement(jsonData);\n    if (stmts.length > 0) {\n      const schemaStmt: string = stmts.join('\\n');\n      try {\n        changes = await UtilsSQLite.execute(db, schemaStmt, true);\n        if (changes < 0) {\n          try {\n            await UtilsSQLite.rollbackTransaction(db, true);\n            mDB.setIsTransActive(false);\n          } catch (err) {\n            return Promise.reject(\n              new Error('CreateSchema: changes < 0 ' + `${err.message}`),\n            );\n          }\n        }\n      } catch (err) {\n        const msg = err.message;\n        try {\n          await UtilsSQLite.rollbackTransaction(db, true);\n          mDB.setIsTransActive(false);\n          return Promise.reject(new Error(`CreateSchema: ${msg}`));\n        } catch (err) {\n          return Promise.reject(\n            new Error('CreateSchema: changes < 0 ' + `${err.message}: ${msg}`),\n          );\n        }\n      }\n    }\n    try {\n      await UtilsSQLite.commitTransaction(db, true);\n      mDB.setIsTransActive(false);\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(\n        new Error('CreateSchema: commit ' + `${err.message}`),\n      );\n    }\n  }\n  static async createSchemaStatement(jsonData: any): Promise<string[]> {\n    const statements: string[] = [];\n    let isLastModified = false;\n    let isSqlDeleted = false;\n\n    // Prepare the statement to execute\n    try {\n      for (const jTable of jsonData.tables) {\n        if (jTable.schema != null && jTable.schema.length >= 1) {\n          // create table\n          statements.push('CREATE TABLE IF NOT EXISTS ' + `${jTable.name} (`);\n          for (let j = 0; j < jTable.schema.length; j++) {\n            if (j === jTable.schema.length - 1) {\n              if (jTable.schema[j].column) {\n                statements.push(\n                  `${jTable.schema[j].column} ${jTable.schema[j].value}`,\n                );\n                if(jTable.schema[j].column === \"last_modified\") {\n                  isLastModified = true;\n                }\n                if(jTable.schema[j].column === \"sql_deleted\") {\n                  isSqlDeleted = true;\n                }\n              } else if (jTable.schema[j].foreignkey) {\n                statements.push(\n                  `FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value}`,\n                );\n              } else if (jTable.schema[j].constraint) {\n                statements.push(\n                  `CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value}`,\n                );\n              }\n            } else {\n              if (jTable.schema[j].column) {\n                statements.push(\n                  `${jTable.schema[j].column} ${jTable.schema[j].value},`,\n                );\n              } else if (jTable.schema[j].foreignkey) {\n                statements.push(\n                  `FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value},`,\n                );\n              } else if (jTable.schema[j].primarykey) {\n                statements.push(\n                  `FOREIGN KEY ${jTable.schema[j].value},`,\n                );\n              } else if (jTable.schema[j].constraint) {\n                statements.push(\n                  `CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value},`,\n                );\n              }\n            }\n          }\n          statements.push(');');\n          if(isLastModified && isSqlDeleted) {\n            // create trigger last_modified associated with the table\n            let trig = 'CREATE TRIGGER IF NOT EXISTS ';\n            trig += `${jTable.name}`;\n            trig += `_trigger_last_modified `;\n            trig += `AFTER UPDATE ON ${jTable.name} `;\n            trig += 'FOR EACH ROW WHEN NEW.last_modified < ';\n            trig += 'OLD.last_modified BEGIN UPDATE ';\n            trig += `${jTable.name} `;\n            trig += `SET last_modified = `;\n            trig += \"(strftime('%s','now')) WHERE id=OLD.id; END;\";\n            statements.push(trig);\n          }\n        }\n\n        if (jTable.indexes != null && jTable.indexes.length >= 1) {\n          for (const jIndex of jTable.indexes) {\n            const tableName = jTable.name;\n            let stmt = `CREATE ${\n              Object.keys(jIndex).includes('mode') ? jIndex.mode + ' ' : ''\n            } INDEX IF NOT EXISTS `;\n            stmt += `${jIndex.name} ON ${tableName} (${jIndex.value});`;\n            statements.push(stmt);\n          }\n        }\n        if (jTable.triggers != null && jTable.triggers.length >= 1) {\n          for (const jTrg of jTable.triggers) {\n            const tableName = jTable.name;\n            if (jTrg.timeevent.toUpperCase().endsWith(\" ON\")) {\n              jTrg.timeevent = jTrg.timeevent.substring(0, jTrg.timeevent.length - 3);\n          }\n\n            let stmt = `CREATE TRIGGER IF NOT EXISTS `;\n            stmt += `${jTrg.name} ${jTrg.timeevent} ON ${tableName} `;\n            if (jTrg.condition) stmt += `${jTrg.condition} `;\n            stmt += `${jTrg.logic};`;\n            statements.push(stmt);\n          }\n        }\n      }\n      return Promise.resolve(statements);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  static async createTablesData(mDB: Database, jsonData: JsonSQLite,\n                                importProgress: EventEmitter<JsonProgressListener>): Promise<number> {\n    let changes = 0;\n    let isValue = false;\n    let lastId = -1;\n    let msg = '';\n    let initChanges = -1;\n    const db = mDB.mDb;\n    try {\n      initChanges = await UtilsSQLite.dbChanges(db);\n      // start a transaction\n      await UtilsSQLite.beginTransaction(db, true);\n      mDB.setIsTransActive(true);\n\n    } catch (err) {\n      return Promise.reject(new Error(`createTablesData: ${err.message}`));\n    }\n    for (const jTable of jsonData.tables) {\n      if (jTable.values != null && jTable.values.length >= 1) {\n        // Create the table's data\n        try {\n          lastId = await UtilsImportJSON.createTableData(db, jTable, jsonData.mode);\n          const msg: string = `create table data ${jTable.name}`;\n          importProgress.emit({progress: msg});\n          if (lastId < 0) break;\n          isValue = true;\n        } catch (err) {\n          msg = err.message;\n          isValue = false;\n          break;\n        }\n      }\n    }\n    if (isValue) {\n      try {\n        await UtilsSQLite.commitTransaction(db, true);\n        mDB.setIsTransActive(false);\n        changes = (await UtilsSQLite.dbChanges(db)) - initChanges;\n        return Promise.resolve(changes);\n      } catch (err) {\n        return Promise.reject(\n          new Error('CreateTablesData: ' + `${err.message}`),\n        );\n      }\n    } else {\n      if(msg.length > 0) {\n        try {\n          await UtilsSQLite.rollbackTransaction(db, true);\n          mDB.setIsTransActive(false);\n          return Promise.reject(new Error(`CreateTablesData: ${msg}`));\n        } catch (err) {\n          return Promise.reject(\n            new Error('CreateTablesData: ' + `${err.message}: ${msg}`),\n          );\n        }\n      } else {\n        // case were no values given\n        return Promise.resolve(0);\n      }\n  }\n  }\n  static async createTableData(db: any, table: any, mode: string): Promise<number> {\n    let lastId = -1;\n    try {\n      // Check if the table exists\n      const tableExists = await UtilsSQLite.isTableExists(db, table.name);\n      if (!tableExists) {\n        return Promise.reject(\n          new Error('CreateTableData: Table ' + `${table.name} does not exist`),\n        );\n      }\n\n      // Get the column names and types\n      const tableNamesTypes: any = await UtilsJSON\n                              .getTableColumnNamesTypes(db, table.name);\n      const tableColumnTypes: string[] = tableNamesTypes.types;\n      const tableColumnNames: string[] = tableNamesTypes.names;\n      if (tableColumnTypes.length === 0) {\n        return Promise.reject(\n          new Error(\n            'CreateTableData: Table ' + `${table.name} info does not exist`,\n          ),\n        );\n      }\n      // Loop on Table Values\n      for (let j = 0; j < table.values.length; j++) {\n        let row = table.values[j];\n        let isRun: boolean = true;\n        const stmt: string = await UtilsImportJSON\n                    .createRowStatement(db, tableColumnNames, row,\n                                        j, table.name, mode);\n        isRun = await UtilsImportJSON.checkUpdate(db, stmt, row, table.name,\n                                                  tableColumnNames);\n        if(isRun) {\n          if(stmt.substring(0,6).toUpperCase() === \"DELETE\") {\n            row = [];\n          }\n          lastId = await UtilsSQLite.run(db, stmt, row, true, 'no');\n          if (lastId < 0) {\n            return Promise.reject(new Error('CreateTableData: lastId < 0'));\n          }\n        } else {\n          lastId = 0;\n        }\n      }\n      return Promise.resolve(lastId);\n    } catch (err) {\n      return Promise.reject(new Error(`CreateTableData: ${err.message}`));\n    }\n  }\n  static async createRowStatement(db: any, tColNames: string[],\n                                  row: any[], j: number, tableName: string,\n                                  mode: string): Promise<string> {\n\n    // Check the row number of columns\n    if (row.length != tColNames.length || row.length ===0 || tColNames.length === 0) {\n      return Promise.reject(\n        new Error(\n          `CreateRowStatement: Table ${tableName} ` +\n            `values row ${j} not correct length`,\n        ),\n      );\n    }\n    try {\n      const retisIdExists: boolean = await UtilsImportJSON.isIdExists(db, tableName, tColNames[0], row[0]);\n      let stmt: string;\n      if (mode === 'full' || (mode === 'partial' && !retisIdExists)) {\n        // Insert\n        const nameString: string = tColNames.join();\n        const questionMarkString = await UtilsImportJSON.createQuestionMarkString(tColNames.length);\n        stmt = `INSERT INTO ${tableName} (${nameString}) VALUES (`;\n        stmt += `${questionMarkString});`;\n\n      } else {\n        // Update or Delete\n        let isUpdate = true\n        const isColDeleted = (element: string) => element === `sql_deleted`;\n        const idxDelete = tColNames.findIndex(isColDeleted);\n        if(idxDelete >= 0) {\n          if(row[idxDelete] === 1) {\n            isUpdate = false;\n            stmt =\n            `DELETE FROM ${tableName} WHERE `;\n            if( typeof row[0] == \"string\") {\n              stmt +=\n              `${tColNames[0]} = '${row[0]}';`;\n            } else {\n              stmt +=\n              `${tColNames[0]} = ${row[0]};`;\n            }\n          }\n        }\n        if(isUpdate) {\n          // Update\n          const setString: string = await UtilsImportJSON.setNameForUpdate(tColNames);\n          if (setString.length === 0) {\n            return Promise.reject(\n              new Error(\n                `CreateRowStatement: Table ${tableName} ` +\n                  `values row ${j} not set to String`,\n              ),\n            );\n          }\n          stmt =\n            `UPDATE ${tableName} SET ${setString} WHERE `;\n          if( typeof row[0] == \"string\") {\n            stmt +=\n            `${tColNames[0]} = '${row[0]}';`;\n          } else {\n            stmt +=\n            `${tColNames[0]} = ${row[0]};`;\n          }\n        }\n      }\n      return Promise.resolve(stmt);\n    } catch (err) {\n      return Promise.reject(new Error(`CreateRowStatement: ${err.message}`));\n    }\n  }\n  static async checkUpdate(db: any, stmt: string, values: any[], tbName: string,\n                                    tColNames: string[]): Promise<boolean> {\n    let isRun: boolean = true;\n    if (stmt.substring(0, 6) === \"UPDATE\") {\n      try {\n        let query = `SELECT * FROM ${tbName} WHERE `;\n        if( typeof values[0] == \"string\") {\n          query +=\n          `${tColNames[0]} = '${values[0]}';`;\n        } else {\n          query +=\n          `${tColNames[0]} = ${values[0]};`;\n        }\n\n\n        const resQuery: any[] = await UtilsJSON.getValues(db, query, tbName);\n        let resValues: any[] = [];\n        if(resQuery.length > 0) {\n          resValues = resQuery[0];\n        }\n        if(values.length > 0  && resValues.length > 0\n                              && values.length === resValues.length) {\n          for(let i = 0; i < values.length; i++) {\n            if(values[i] !== resValues[i]) {\n              return Promise.resolve(true);\n            }\n          }\n          return Promise.resolve(false);\n        } else {\n          const msg = \"Both arrays not the same length\"\n          return Promise.reject(new Error(`CheckUpdate: ${msg}`));\n        }\n      } catch (err) {\n        return Promise.reject(new Error(`CheckUpdate: ${err.message}`));\n      }\n    } else {\n      return Promise.resolve(isRun);\n    }\n  }\n  static async isIdExists(db: any, dbName: string, firstColumnName: string,\n                          key: any): Promise<boolean> {\n    let ret = false;\n    let query: string =\n      `SELECT ${firstColumnName} FROM ` +\n      `${dbName} WHERE ${firstColumnName} = `;\n    if (typeof key === 'number') query += `${key};`;\n    if (typeof key === 'string') query += `'${key}';`;\n\n    try {\n      const resQuery: any[] = await UtilsSQLite.queryAll(db, query, []);\n      if (resQuery.length === 1) ret = true;\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(new Error(`IsIdExists: ${err.message}`));\n    }\n  }\n  static async isType(type: string, value: any): Promise<void> {\n    let ret = false;\n    if (type === 'NULL' && typeof value === 'object') ret = true;\n    if (type === 'TEXT' && typeof value === 'string') ret = true;\n    if (type === 'INTEGER' && typeof value === 'number') ret = true;\n    if (type === 'REAL' && typeof value === 'number') ret = true;\n    if (type === 'BLOB' && typeof value === 'string') ret = true;\n    if (ret) {\n      return Promise.resolve();\n    } else {\n      return Promise.reject(new Error('IsType: not a SQL Type'));\n    }\n  }\n  static async checkColumnTypes(tableTypes: any[], rowValues: any[]): Promise<void> {\n    for (let i = 0; i < rowValues.length; i++) {\n      if (rowValues[i] != null) {\n        try {\n          await UtilsImportJSON.isType(tableTypes[i], rowValues[i]);\n        } catch (err) {\n          return Promise.reject(new Error('CheckColumnTypes: Type not found'));\n        }\n      }\n    }\n    return Promise.resolve();\n  }\n  static async createQuestionMarkString(length: number): Promise<string> {\n    let retString = '';\n    for (let i = 0; i < length; i++) {\n      retString += '?,';\n    }\n    if (retString.length > 1) {\n      retString = retString.slice(0, -1);\n      return Promise.resolve(retString);\n    } else {\n      return Promise.reject(new Error('CreateQuestionMarkString: length = 0'));\n    }\n  }\n  static async setNameForUpdate(names: string[]): Promise<string> {\n    let retString = '';\n    for (const name of names) {\n      retString += `${name} = ? ,`;\n    }\n    if (retString.length > 1) {\n      retString = retString.slice(0, -1);\n      return Promise.resolve(retString);\n    } else {\n      return Promise.reject(new Error('SetNameForUpdate: length = 0'));\n    }\n  }\n\n  static async createView(db: any, view: JsonView): Promise<void> {\n    const stmt = `CREATE VIEW IF NOT EXISTS ${view.name} AS ${view.value};`;\n    try {\n      const changes = await UtilsSQLite.execute(db, stmt, true);\n      if (changes < 0) {\n        return Promise.reject(new Error(`CreateView: ${view.name} failed`));\n      }\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`CreateView: ${err.message}`));\n    }\n  }\n  static async createViews(mDB: Database, jsonData: JsonSQLite): Promise<number> {\n    const db = mDB.mDb;\n    let isView = false;\n    let msg = '';\n    let initChanges = -1;\n    let changes = -1;\n    try {\n      initChanges = await UtilsSQLite.dbChanges(db);\n      // start a transaction\n      await UtilsSQLite.beginTransaction(db, true);\n      mDB.setIsTransActive(true);\n    } catch (err) {\n      return Promise.reject(new Error(`createViews: ${err.message}`));\n    }\n    for (const jView of jsonData.views) {\n      if (jView.value != null) {\n        // Create the view\n        try {\n          await UtilsImportJSON.createView(db, jView);\n          isView = true;\n        } catch (err) {\n          msg = err.message;\n          isView = false;\n          break;\n        }\n      }\n    }\n    if (isView) {\n      try {\n        await UtilsSQLite.commitTransaction(db, true);\n        mDB.setIsTransActive(false);\n        changes = (await UtilsSQLite.dbChanges(db)) - initChanges;\n        return Promise.resolve(changes);\n      } catch (err) {\n        return Promise.reject(new Error('createViews: ' + `${err.message}`));\n      }\n    } else {\n      if (msg.length > 0) {\n        try {\n          await UtilsSQLite.rollbackTransaction(db, true);\n          mDB.setIsTransActive(false);\n          return Promise.reject(new Error(`createViews: ${msg}`));\n        } catch (err) {\n          return Promise.reject(\n            new Error('createViews: ' + `${err.message}: ${msg}`),\n          );\n        }\n      } else {\n        // case were no views given\n        return Promise.resolve(0);\n      }\n    }\n  }\n}\n"]}