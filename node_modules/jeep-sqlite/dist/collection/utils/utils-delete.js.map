{"version":3,"file":"utils-delete.js","sourceRoot":"","sources":["../../src/utils/utils-delete.ts"],"names":[],"mappings":"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","sourcesContent":["import { Database } from \"./database\";\nimport { UtilsSQLite } from \"./utils-sqlite\";\nimport { UtilsSQLStatement } from \"./utils-sqlstatement\";\nclass UtilsDeleteError {\n  static findReferencesAndUpdate(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static getRefs(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static getReferences(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static searchForRelatedItems(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static upDateWhereForDefault(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static upDateWhereForRestrict(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static upDateWhereForCascade(message: string) {\n    return new UtilsDeleteError(message);\n  }\n  static executeUpdateForDelete(message: string) {\n    return new UtilsDeleteError(message);\n  }\n\n  constructor(public message: string) {}\n}\n\nexport class UtilsDelete {\n  static async findReferencesAndUpdate(\n    mDB: Database,\n    tableName: string,\n    whereStmt: string,\n    initColNames: string[],\n    values: any[]\n  ): Promise<boolean> {\n    try {\n      let retBool = true;\n      const result = await UtilsDelete.getReferences(mDB, tableName);\n      const references = result.retRefs;\n      const tableNameWithRefs = result.tableWithRefs\n      if (references.length <= 0) {\n        return retBool\n      }\n      if (tableName === tableNameWithRefs) {\n        return retBool\n      }\n      // Loop through references\n      for (const ref of references) {\n        // Extract the FOREIGN KEY constraint info from the ref statement\n        const foreignKeyInfo = UtilsSQLStatement.extractForeignKeyInfo(ref);\n\n        // Get the tableName of the references\n        const refTable: string = foreignKeyInfo.tableName;\n        if (refTable === '' || refTable !== tableName) {\n          continue;\n        }\n\n        // Get the with ref column names\n        const withRefsNames: string[] = foreignKeyInfo.forKeys;\n        // Get the column names\n        const colNames: string[] = foreignKeyInfo.refKeys;\n        if(colNames.length !== withRefsNames.length) {\n          const msg = \"findReferencesAndUpdate: mismatch length\";\n          throw UtilsDeleteError.findReferencesAndUpdate(\n            msg\n          );\n        }\n\n        const action: string = foreignKeyInfo.action;\n        if (action === 'NO_ACTION') {\n          continue;\n        }\n        let updTableName: string = tableNameWithRefs;\n        let updColNames: string[] = withRefsNames;\n        let results: { setStmt: string; uWhereStmt: string } = {\n          uWhereStmt: '',\n          setStmt: '',\n        };\n        if (!UtilsDelete.checkValuesMatch(withRefsNames, initColNames)) {\n          // Case: no match\n          // Search for related items in tableName\n          const result = await UtilsDelete\n                            .searchForRelatedItems(mDB, updTableName,\n                                                   tableName, whereStmt,\n                                                   withRefsNames, colNames,\n                                                   values);\n          if (result.relatedItems.length === 0 && result.key.length <= 0) {\n            continue;\n          }\n\n          if (updTableName !== tableName) {\n            switch (action) {\n              case 'RESTRICT':\n                results = await UtilsDelete\n                      .upDateWhereForRestrict(result);\n                break;\n              case 'CASCADE':\n                results = await UtilsDelete\n                      .upDateWhereForCascade(result);\n                break;\n              default:\n                results = await UtilsDelete\n                      .upDateWhereForDefault(withRefsNames, result);\n                break;\n            }\n          }\n        } else {\n          throw UtilsDeleteError.findReferencesAndUpdate(\n            'Not implemented. Please transfer your example to the maintener'\n          );\n        }\n\n        if (\n\n          results.setStmt.length > 0 &&\n          results.uWhereStmt.length > 0\n        ) {\n          UtilsDelete.executeUpdateForDelete(\n            mDB,\n            updTableName,\n            results.uWhereStmt,\n            results.setStmt,\n            updColNames,\n            values\n          );\n        }\n      }\n      return retBool;\n    } catch (error) {\n      const msg = error.message ? error.message : error\n      if (error instanceof UtilsDeleteError) {\n        throw UtilsDeleteError.findReferencesAndUpdate(msg);\n      } else {\n        throw error;\n      }\n\n    }\n  }\n  static async getReferences(db: any, tableName: string): Promise<{tableWithRefs: string, retRefs: string[]}> {\n    const sqlStmt: string =\n    \"SELECT sql FROM sqlite_master \" +\n    \"WHERE sql LIKE('%FOREIGN KEY%') AND sql LIKE('%REFERENCES%') AND \" +\n    \"sql LIKE('%\" + tableName + \"%') AND sql LIKE('%ON DELETE%');\";\n    try {\n      const res: any[] = await UtilsSQLite.queryAll(db,sqlStmt,[]);\n      // get the reference's string(s)\n      let retRefs: string[] = [];\n      let tableWithRefs: string = \"\";\n      if(res.length > 0) {\n        let result = UtilsDelete.getRefs(res[0].sql);\n        retRefs = result.foreignKeys\n        tableWithRefs = result.tableName\n      }\n      return Promise.resolve({tableWithRefs: tableWithRefs, retRefs: retRefs});\n    } catch (err) {\n      const error = err.message ? err.message : err;\n      const msg = `getReferences: ${error}`;\n      throw UtilsDeleteError.getReferences(msg);\n    }\n\n  }\n  static getRefs(sqlStatement: string): { tableName: string; foreignKeys: string[] } {\n    let tableName = '';\n    const foreignKeys: string[] = [];\n    const statement = UtilsSQLStatement.flattenMultilineString(sqlStatement);\n\n    try {\n      // Regular expression pattern to match the table name\n      const tableNamePattern = /CREATE\\s+TABLE\\s+(\\w+)\\s+\\(/;\n      const tableNameMatch = statement.match(tableNamePattern);\n      if (tableNameMatch) {\n        tableName = tableNameMatch[1];\n      }\n\n      // Regular expression pattern to match the FOREIGN KEY constraints\n      const foreignKeyPattern = /FOREIGN\\s+KEY\\s+\\([^)]+\\)\\s+REFERENCES\\s+(\\w+)\\s*\\([^)]+\\)\\s+ON\\s+DELETE\\s+(CASCADE|RESTRICT|SET\\s+DEFAULT|SET\\s+NULL|NO\\s+ACTION)/g;\n      const foreignKeyMatches = statement.matchAll(foreignKeyPattern);\n      for (const foreignKeyMatch of foreignKeyMatches) {\n        const foreignKey = foreignKeyMatch[0];\n        foreignKeys.push(foreignKey);\n      }\n    } catch (error) {\n      const msg = `getRefs: Error creating regular expression: ${error}`;\n      throw UtilsDeleteError.getRefs(msg);\n    }\n\n    return { tableName, foreignKeys };\n  }\n  static async getReferencedTableName(refValue: string): Promise<string> {\n    var tableName: string = '';\n\n    if (refValue.length > 0) {\n      const arr: string[] = refValue.split(new RegExp('REFERENCES','i'));\n      if (arr.length === 2) {\n        const oPar: number = arr[1].indexOf(\"(\");\n        tableName = arr[1].substring(0, oPar).trim();\n      }\n    }\n    return tableName;\n  }\n\n  static async searchForRelatedItems(mDB: Database, updTableName: string,\n                                     tableName: string, whStmt: string,\n                                     withRefsNames: string[],\n                                     colNames: string[], values: any[]\n                        ): Promise<{key: string, relatedItems: any[] }> {\n    const relatedItems:  any [] = [];\n    let key = \"\";\n    const t1Names = withRefsNames.map((name) => `t1.${name}`);\n    const t2Names = colNames.map((name) => `t2.${name}`);\n    try {\n      // addPrefix to the whereClause and swap colNames with  withRefsNames\n      let whereClause = UtilsSQLStatement\n                              .addPrefixToWhereClause(whStmt, colNames,\n                                                      withRefsNames, \"t2.\");\n      // look at the whereclause and change colNames with  withRefsNames\n      if (whereClause.endsWith(\";\")) {\n        whereClause = whereClause.slice(0, -1);\n      }\n      const resultString = t1Names\n        .map((t1, index) => `${t1} = ${t2Names[index]}`)\n        .join(\" AND \");\n\n      const sql =\n        `SELECT t1.rowid FROM ${updTableName} t1 ` +\n        `JOIN ${tableName} t2 ON ${resultString} ` +\n        `WHERE ${whereClause} AND t1.sql_deleted = 0;`;\n      const vals: any[] = await UtilsSQLite.queryAll(mDB, sql, values);\n      if (vals.length > 0) {\n        key = (Object.keys(vals[0]))[0]\n        relatedItems.push(...vals);\n      }\n      return {key: key, relatedItems: relatedItems};\n    } catch (error) {\n      const msg = error.message ? error.message : error;\n      throw UtilsDeleteError.searchForRelatedItems(msg);\n    }\n  }\n\n  static async upDateWhereForDefault(\n                    withRefsNames: string[],\n                    results: { key: string, relatedItems: any[] }\n                  ): Promise<{ setStmt: string; uWhereStmt: string }> {\n    let setStmt = '';\n    let uWhereStmt = '';\n    try {\n\n      const key = results.key;\n      const cols: any[] = [];\n      for (const relItem of results.relatedItems) {\n        const mVal = relItem[key];\n        if (mVal !== undefined) {\n          cols.push(mVal);\n        }\n      }\n\n      // Create the set statement\n      for (const name of withRefsNames) {\n        setStmt += `${name} = NULL, `;\n      }\n      setStmt += 'sql_deleted = 0';\n//      const curTime = UtilsDelete.getCurrentTimeAsInteger() + 5;\n//      setStmt += `last_modified = ${curTime}`;\n\n      // Create the where statement\n      uWhereStmt = `WHERE ${key} IN (`;\n      for (const col of cols) {\n        uWhereStmt += `${col},`;\n      }\n      if (uWhereStmt.endsWith(',')) {\n        uWhereStmt = uWhereStmt.slice(0, -1);\n      }\n      uWhereStmt += ');';\n    } catch (error) {\n      const msg = error.message ? error.message : error;\n      throw UtilsDeleteError.upDateWhereForDefault(msg);\n    }\n    return { setStmt, uWhereStmt };\n  }\n\n  static async upDateWhereForRestrict(\n                        results: { key: string, relatedItems: any[] }\n                      ): Promise<{ setStmt: string; uWhereStmt: string }> {\n    try {\n      const setStmt = '';\n      const uWhereStmt = '';\n      if (results.relatedItems.length > 0) {\n        const msg =\n          'Restrict mode related items exist, please delete them first';\n        throw UtilsDeleteError.upDateWhereForRestrict(msg);\n      }\n      return { setStmt, uWhereStmt };\n    } catch (error) {\n      const msg = error.message ? error.message : error;\n      throw UtilsDeleteError.upDateWhereForRestrict(\n        msg\n      );\n    }\n  }\n  static async upDateWhereForCascade(\n                      results: { key: string, relatedItems: any[] }\n                    ): Promise<{ setStmt: string; uWhereStmt: string }> {\n    let setStmt = '';\n    let uWhereStmt = '';\n    try {\n      const key = results.key;\n      const cols: any[] = [];\n      for (const relItem of results.relatedItems) {\n        const mVal = relItem[key];\n        if (mVal !== undefined) {\n          cols.push(mVal);\n        }\n      }\n      setStmt += 'sql_deleted = 1';\n\n      // Create the where statement\n      uWhereStmt = `WHERE ${key} IN (`;\n      for (const col of cols) {\n        uWhereStmt += `${col},`;\n      }\n      if (uWhereStmt.endsWith(',')) {\n        uWhereStmt = uWhereStmt.slice(0, -1);\n      }\n      uWhereStmt += ');';\n\n    } catch (error) {\n      const msg = error.message ? error.message : error;\n      throw UtilsDeleteError.upDateWhereForCascade(msg);\n    }\n    return { setStmt, uWhereStmt };\n  }\n\n  static executeUpdateForDelete(\n    mDB: Database,\n    tableName: string,\n    whereStmt: string,\n    setStmt: string,\n    colNames: string[],\n    values: any[]\n  ): void {\n    try {\n      let lastId: number = -1;\n\n      // Update sql_deleted for this references\n      const stmt = `UPDATE ${tableName} SET ${setStmt} ${whereStmt}`;\n      const selValues: any[] = [];\n      if (values.length > 0) {\n        const arrVal: string[] = whereStmt.split('?');\n        if (arrVal[arrVal.length - 1] === ';') {\n          arrVal.pop();\n        }\n\n        for (let jdx = 0; jdx < arrVal.length; jdx++) {\n          for (const updVal of colNames) {\n            const indices: number[] = UtilsSQLStatement.indicesOf(arrVal[jdx], updVal);\n            if (indices.length > 0) {\n              selValues.push(values[jdx]);\n            }\n          }\n        }\n      }\n      const retObj = UtilsSQLite.run( mDB, stmt, selValues,\n                                      false,'no');\n      lastId = retObj[\"lastId\"];\n\n      if (lastId === -1) {\n        const msg =\n          `UPDATE sql_deleted failed for table: ${tableName}`;\n        throw  UtilsDeleteError.executeUpdateForDelete(msg);\n      }\n    } catch (error) {\n      const msg = error.message ? error.message : error\n        throw UtilsDeleteError.executeUpdateForDelete(msg);\n    }\n  }\n\n\n  static getCurrentTimeAsInteger(): number {\n    const currentTime = Math.floor(Date.now() / 1000);\n    return currentTime;\n  }\n\n  static checkValuesMatch(array1: string[], array2: string[]): boolean {\n    for (const value of array1) {\n      if (!array2.includes(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]}