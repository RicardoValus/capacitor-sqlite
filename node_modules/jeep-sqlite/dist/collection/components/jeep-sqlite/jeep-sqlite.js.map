{"version":3,"file":"jeep-sqlite.js","sourceRoot":"","sources":["../../../src/components/jeep-sqlite/jeep-sqlite.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Method, Event, EventEmitter, Prop, State, Watch, Element } from '@stencil/core';\nimport { Database } from '../../utils/database';\nimport localForage from 'localforage';\nimport { EchoOptions, ConnectionOptions, SQLiteOptions, SQLiteExecuteOptions, SQLiteQueryOptions,\n         SQLiteRunOptions, SQLiteSetOptions, SQLiteSet, SQLiteTableOptions,\n         SQLiteSyncDateOptions, SQLiteImportOptions, SQLiteExportOptions, JsonSQLite,\n         SQLiteUpgradeOptions, SQLiteVersionUpgrade, AllConnectionsOptions,\n         EchoResult, SQLiteChanges,SQLiteResult, SQLiteValues, SQLiteSyncDate,\n         SQLiteJson, JsonProgressListener, SQLiteVersion,  SQLiteFromAssetsOptions,\n         SQLiteHTTPOptions, HTTPRequestEndedListener, PickOrSaveDatabaseEndedListener,\n         SQLiteLocalDiskOptions, ButtonOptions } from '../../interfaces/interfaces';\nimport { UtilsJSON } from '../../utils/utils-json';\nimport { UtilsStore } from '../../utils/utils-store';\nimport * as JSZip from 'jszip';\nimport { fileOpen, fileSave, supported } from 'browser-fs-access';\n\n@Component({\n  tag: 'jeep-sqlite',\n  styleUrl: 'jeep-sqlite.css',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class JeepSqlite {\n\n @Element()  el!: HTMLJeepSqliteElement;\n  //************************\n  //* Property Definitions *\n  //************************\n\n  /**\n   * AutoSave\n   */\n  @Prop({\n    attribute: \"autosave\",\n    reflect: true\n  }) autoSave: boolean = false;\n  /**\n   * in use with TypeOrm\n   */\n  @Prop({\n    attribute: \"typeorm\",\n    reflect: true\n  }) typeOrm: boolean = false;\n  /**\n   * WasmPath\n   */\n   @Prop({\n    attribute: \"wasmpath\",\n    reflect: true\n  }) wasmPath: string;\n  /**\n   * Pick Button Text\n   */\n  @Prop({\n    attribute: \"picktext\",\n    reflect: true\n  }) pickText: string;\n  /**\n   * Save Button Text\n   */\n  @Prop({\n    attribute: \"savetext\",\n    reflect: true\n  }) saveText: string;\n  /**\n   * Button Options\n   */\n  @Prop({\n    attribute: \"buttonoptions\",\n    reflect: true\n  }) buttonOptions: string;\n\n  //*********************\n  //* State Definitions *\n  //*********************\n\n  @State() innerAutoSave: boolean;\n  @State() innerTypeOrm: boolean;\n  @State() innerWasmPath: string;\n  @State() innerPickText: string;\n  @State() innerSaveText: string;\n  @State() innerButtonOptions: ButtonOptions\n\n  //*****************************\n  //* Watch on Property Changes *\n  //*****************************\n\n  @Watch('autoSave')\n  parseAutoSave(newValue: boolean) {\n    this.innerAutoSave = newValue;\n  }\n  @Watch('typeOrm')\n  parseTypeOrm(newValue: boolean) {\n    this.innerTypeOrm = newValue;\n  }\n  @Watch('wasmPath')\n  parseWasmPath(newValue: string) {\n    this.innerWasmPath = newValue;\n  }\n  @Watch('pickText')\n  parsePickText(newValue: string) {\n    this.innerPickText = newValue;\n  }\n  @Watch('saveText')\n  parseSaveText(newValue: string) {\n    this.innerSaveText = newValue;\n  }\n  @Watch('buttonOptions')\n  parseButtonOptions(newValue: string) {\n    this.innerButtonOptions = JSON.parse(newValue);\n    const keys = Object.keys(this.innerButtonOptions);\n    for (const key of keys) {\n      switch(key) {\n        case \"top\": {\n          this.el.style.setProperty('--jeep-sqlite-top',this.innerButtonOptions[key]);\n          break;\n        }\n        case \"right\": {\n          this.el.style.setProperty('--jeep-sqlite-right',this.innerButtonOptions[key]);\n          break;\n        }\n        case \"fontSize\": {\n          this.el.style.setProperty('--jeep-sqlite-font-size',this.innerButtonOptions[key]);\n          break;\n        }\n        case \"padding\": {\n          this.el.style.setProperty('--jeep-sqlite-padding',this.innerButtonOptions[key]);\n          break;\n        }\n        case \"backgroundColor\": {\n          this.el.style.setProperty('--jeep-sqlite-background-color',this.innerButtonOptions[key]);\n          break;\n        }\n        case \"color\": {\n          this.el.style.setProperty('--jeep-sqlite-color',this.innerButtonOptions[key]);\n          break;\n        }\n      }\n    }\n  }\n\n  //*********************\n  //* Event Definitions *\n  //*********************\n\n  @Event({eventName:'jeepSqliteImportProgress',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) importProgress: EventEmitter<JsonProgressListener>;\n  @Event({eventName:'jeepSqliteExportProgress',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) exportProgress: EventEmitter<JsonProgressListener>;\n  @Event({eventName:'jeepSqliteHTTPRequestEnded',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) HTTPRequestEnded: EventEmitter<HTTPRequestEndedListener>;\n  @Event({eventName:'jeepSqlitePickDatabaseEnded',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) PickDatabaseEnded: EventEmitter<PickOrSaveDatabaseEndedListener >;\n  @Event({eventName:'jeepSqliteSaveDatabaseToDisk',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) SaveDatabaseEnded: EventEmitter<PickOrSaveDatabaseEndedListener >;\n\n  //**********************\n  //* Method Definitions *\n  //**********************\n\n  @Method()\n  async echo(options: EchoOptions): Promise<EchoResult> {\n    return options;\n  }\n  @Method()\n  async createConnection(options: ConnectionOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const version: number = options.version ? options.version : 1;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._createConnection(dbName, version, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isConnection(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    const ret: SQLiteResult = await this._isConnection(dbName, readonly);\n    return Promise.resolve(ret);\n  }\n  @Method()\n  async closeConnection(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._closeConnection(dbName, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n\n@Method()\n  async open(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._open(dbName, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async close(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._close(dbName, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getVersion(options: SQLiteOptions): Promise<SQLiteVersion> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const res: SQLiteVersion = await this._getVersion(dbName, readonly);\n      return Promise.resolve(res);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async beginTransaction(options: SQLiteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    if(readonly) {\n      return Promise.reject(`BeginTransaction: not allowed in read-only mode`);\n    }\n    try {\n      const changes: SQLiteChanges = await this._beginTransaction(dbName);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async commitTransaction(options: SQLiteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    if(readonly) {\n      return Promise.reject(`CommitTransaction: not allowed in read-only mode`);\n    }\n\n    try {\n      const changes: SQLiteChanges = await this._commitTransaction(dbName);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async rollbackTransaction(options: SQLiteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    if(readonly) {\n      return Promise.reject(`BeginTransaction: not allowed in read-only mode`);\n    }\n\n    try {\n      const changes: SQLiteChanges = await this._rollbackTransaction(dbName);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isTransactionActive(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    if(readonly) {\n      return Promise.reject(`isTransactionActive: not allowed in read-only mode`);\n    }\n\n    try {\n      const res: SQLiteResult = await this._isTransactionActive(dbName);\n      return Promise.resolve(res);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n\n  @Method()\n  async execute(options: SQLiteExecuteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statements') || options.statements.length === 0) {\n      return Promise.reject('Must provide raw SQL statements');\n    }\n    const dbName: string = options.database;\n    const statements: string = options.statements;\n    let transaction: boolean= true;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    try {\n      const changes: SQLiteChanges = await this._execute(dbName, statements, transaction, readonly);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async executeSet(options: SQLiteSetOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('set') || options.set.length === 0) {\n      return Promise.reject('Must provide a non-empty set of SQL statements');\n    }\n    const dbName: string = options.database;\n    const setOfStatements: SQLiteSet[] = options.set;\n    let transaction: boolean= true;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    const returnMode: string = options.returnMode? options.returnMode : 'no';\n    try {\n      const changes: SQLiteChanges = await this._executeSet(dbName, setOfStatements, transaction, readonly, returnMode);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async run(options: SQLiteRunOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statement') || options.statement.length === 0) {\n      return Promise.reject('Must provide a run statement');\n    }\n    const dbName: string = options.database;\n    const statement: string = options.statement;\n    let values: any[]  = [];\n    if (keys.includes('values')) {\n      values = options.values.length > 0 ? options.values : [];\n    }\n    let transaction: boolean= true;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    const returnMode: string = options.returnMode? options.returnMode : 'no';\n    try {\n      const retChanges:  SQLiteChanges = await this._run(dbName, statement, values, transaction,\n        readonly, returnMode);\n      return Promise.resolve(retChanges);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async query(options: SQLiteQueryOptions): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statement') || options.statement.length === 0) {\n      return Promise.reject('Must provide a query statement');\n    }\n    let values: any[]  = [];\n    if (keys.includes('values')) {\n      values = options.values.length > 0 ? options.values : [];\n    }\n    const dbName: string = options.database;\n    const statement: string = options.statement;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const retValues = await this._query(dbName, statement, values, readonly);\n      return Promise.resolve(retValues);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getTableList(options: SQLiteOptions): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const retValues = await this._getTableList(dbName, readonly);\n      return Promise.resolve(retValues);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isDBExists(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret: SQLiteResult = await this._isDBExists(dbName, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isDBOpen(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret: SQLiteResult = await this._isDBOpen(dbName, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async deleteDatabase(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      return await this._deleteDatabase(dbName, readonly);\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isStoreOpen(): Promise<boolean> {\n    return Promise.resolve(this.isStore);\n  }\n  @Method()\n  async copyFromAssets(options: SQLiteFromAssetsOptions): Promise<void> {\n    let overwrite: boolean;\n    if(options != null) {\n      const keys = Object.keys(options);\n      overwrite = keys.includes('overwrite') ? options.overwrite : true;\n    } else {\n      overwrite = true;\n    }\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    try {\n      await this._copyFromAssets(overwrite);\n      return Promise.resolve();\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isTableExists(options: SQLiteTableOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    if (!keys.includes('table')) {\n      return Promise.reject('Must provide a table name');\n    }\n    const tableName: string = options.table;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret: SQLiteResult = await this._isTableExists(dbName, tableName, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async createSyncTable(options: SQLiteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret: SQLiteChanges = await this._createSyncTable(dbName, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getSyncDate(options: SQLiteSyncDateOptions): Promise<SQLiteSyncDate> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret: SQLiteSyncDate = await this._getSyncDate(dbName, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async setSyncDate(options: SQLiteSyncDateOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('syncdate')) {\n      return Promise.reject('Must provide a synchronization date');\n    }\n    const dbName: string = options.database;\n    const syncDate: string = options.syncdate;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._setSyncDate(dbName, syncDate, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isJsonValid(options: SQLiteImportOptions): Promise<SQLiteResult> {\n    const keys = Object.keys(options);\n    if (!keys.includes('jsonstring')) {\n      return Promise.reject('Must provide a json object');\n    }\n    const jsonStrObj: string = options.jsonstring;\n    try {\n      const ret = await this._isJsonValid(jsonStrObj);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async importFromJson(options: SQLiteImportOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('jsonstring')) {\n      return Promise.reject('Must provide a json object');\n    }\n    const jsonStrObj: string = options.jsonstring;\n    try {\n      const ret = await this._importFromJson(jsonStrObj);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async exportToJson(options: SQLiteExportOptions): Promise<SQLiteJson> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('jsonexportmode')) {\n      return Promise.reject('Must provide a json export mode');\n    }\n    const dbName: string = options.database;\n    const exportMode: string = options.jsonexportmode;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      const ret = await this._exportToJson(dbName, exportMode, readonly);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async deleteExportedRows(options: SQLiteOptions): Promise<void> {\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n   try {\n      await this._deleteExportedRows(dbName, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async addUpgradeStatement(options: SQLiteUpgradeOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('upgrade')) {\n      return Promise.reject('Must provide an upgrade capSQLiteVersionUpgrade Object');\n    }\n    const dbName: string = options.database;\n    const upgrades: SQLiteVersionUpgrade[] = options.upgrade;\n    for(const upgrade of upgrades) {\n      const versionUpgradeKeys = Object.keys(upgrade);\n\n      if (\n        !versionUpgradeKeys.includes('toVersion') ||\n        !versionUpgradeKeys.includes('statements')\n      ) {\n        return Promise.reject('Must provide an upgrade capSQLiteVersionUpgrade Object');\n      }\n\n      if (typeof upgrade.toVersion != 'number') {\n        return Promise.reject('upgrade.toVersion must be a number');\n      }\n\n      if (this._versionUpgrades[dbName]) {\n        this._versionUpgrades[dbName][upgrade.toVersion] = upgrade;\n      } else {\n        const upgVDict: Record<number, SQLiteVersionUpgrade> = {};\n        upgVDict[upgrade.toVersion] = upgrade;\n        this._versionUpgrades[dbName] = upgVDict;\n      }\n    }\n    return Promise.resolve();\n  }\n  @Method()\n  async isDatabase(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteResult = await this._isDatabase(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getDatabaseList(): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    try {\n      const ret: SQLiteValues = await this._getDatabaseList();\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async checkConnectionsConsistency(options: AllConnectionsOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('dbNames')) {\n      return Promise.reject(`Must provide a list of connection's name`);\n    }\n    const dbNames: string[] = options.dbNames;\n    if (!keys.includes('openModes')) {\n      return Promise.reject(`Must provide a list of connection's open mode`);\n    }\n    const openModes: string[] = options.openModes;\n    try {\n      const ret = await this._checkConnectionsConsistency(dbNames, openModes);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async saveToStore(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const readonly: boolean = options.readonly ? options.readonly : false;\n    try {\n      await this._saveToStore(dbName, readonly);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async saveToLocalDisk(options: SQLiteOptions): Promise<void> {\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._saveToLocalDisk(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getFromLocalDiskToStore(options: SQLiteLocalDiskOptions): Promise<void> {\n    const overwrite: boolean = options.overwrite ? options.overwrite : true;\n    if (supported) {\n      console.log('Using the File System Access API.');\n    } else {\n      console.log('Using the fallback implementation.');\n    }\n    try {\n      await this._getFromLocalDiskToStore(overwrite);\n      return Promise.resolve();\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getFromHTTPRequest(options: SQLiteHTTPOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('url')) {\n      return Promise.reject('Must provide an url');\n    }\n    const url: string = options.url;\n    const overwrite: boolean = options.overwrite ? options.overwrite : true;\n    try {\n      await this._getFromHTTPRequest(url, overwrite);\n      return Promise.resolve();\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n  //********************************\n  //* Component Internal Variables *\n  //********************************\n\n  private store: LocalForage;\n  private storeName: string;\n  private isStore: boolean = false;\n  private _dbDict: any = {};\n  private databaseList: any = {};\n  private _versionUpgrades: Record<string, Record<number, SQLiteVersionUpgrade>> = {};\n  private _element: any;\n  private _blob: Blob;\n  private _opts: any;\n  private _buttonSaveEl: HTMLButtonElement;\n  private _buttonPickEl: HTMLButtonElement;\n  private _overwrite: boolean = true;\n\n  //*******************************\n  //* Component Lifecycle Methods *\n  //*******************************\n  connectedCallback() {\n    this.parseAutoSave(this.autoSave !== undefined ? this.autoSave : false);\n    this.parseTypeOrm(this.typeOrm !== undefined ? this.typeOrm : false);\n    this.parseWasmPath(this.wasmPath !== undefined ? this.wasmPath : '/assets');\n    this.parseSaveText(this.saveText !== undefined ? this.saveText : 'Save');\n    this.parsePickText(this.pickText !== undefined ? this.pickText : 'Pick a database');\n    if(this.buttonOptions !== undefined) {\n      this.parseButtonOptions(this.buttonOptions);\n    }\n\n    this.openStore(\"jeepSqliteStore\",\"databases\").then((mStore) => {\n      this.isStore = mStore;\n    });\n  }\n  componentWillLoad() {\n  }\n  async componentDidLoad() {\n    this._element = this.el.shadowRoot;\n\n    if(!this.isStore) {\n      console.log('jeep-sqlite isStore = false');\n    }\n  }\n\n  //******************************\n  //* Private Method Definitions *\n  //******************************\n\n  private async _createConnection(database: string, version: number,\n                                  readonly: boolean): Promise<void> {\n    let upgDict: Record<number, SQLiteVersionUpgrade> = {};\n    const vUpgKeys: string[] = Object.keys(this._versionUpgrades);\n    if (vUpgKeys.length !== 0 && vUpgKeys.includes(database)) {\n      upgDict = this._versionUpgrades[database];\n    }\n    const dbDictKeys = Object.keys(this._dbDict);\n    let mDB: Database;\n    try {\n      if (dbDictKeys.length > 0 && (\n              dbDictKeys.includes(\"RW_\" + database) ||\n              dbDictKeys.includes(\"RO_\" + database)\n          ))\n      {\n        mDB = dbDictKeys.includes(\"RW_\" + database)  ? this._dbDict[\"RW_\" + database]\n                                                     : this._dbDict[\"RO_\" + database];\n\n      } else {\n        mDB = new Database(database + 'SQLite.db', version, upgDict,\n                           this.store, this.innerAutoSave, this.innerWasmPath);\n      }\n      const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n      this._dbDict[connName] = mDB;\n      return Promise.resolve();\n    } catch(err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(msg);\n    }\n  }\n  private async _isConnection(database: string, readonly: boolean): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (keys.includes(connName)) {\n      return {result: true};\n    } else {\n      return {result: false};\n    }\n  }\n  private async _closeConnection(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`CloseConnection: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    try {\n      if (mDB.isDBOpen()) {\n        await mDB.close();\n      }\n      // remove the connection from dictionary\n      delete this._dbDict[connName];\n      return Promise.resolve();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`CloseConnection: ${msg}`);\n    }\n  }\n\n  private async _open(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Open: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    try {\n      await mDB.open();\n      return Promise.resolve();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Open: ${msg}`);\n    }\n  }\n  private async _close(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Close: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `Close: ${database} database not opened`);\n    }\n    try {\n      await mDB.close();\n      return Promise.resolve();\n    } catch (err:any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Close: ${msg}`);\n    }\n  }\n  private async _saveToStore(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`SaveToStore: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `SaveToStore: ${database} database not opened`);\n    }\n    try {\n      await mDB.saveToStore();\n      return Promise.resolve();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`SaveToStore: ${msg}`);\n    }\n  }\n  private async _saveToLocalDisk(database: string):Promise<void> {\n    try {\n\n      const keys = Object.keys(this._dbDict);\n      const connName = \"RW_\" + database;\n      if (!keys.includes(connName)) {\n        return Promise.reject(\n          'SaveToLocalDisk: No available connection for ' + `${database}`,\n        );\n      }\n      const mDB = this._dbDict[connName];\n      if (!mDB.isDBOpen()) {\n        return Promise.reject(\n          `SaveToLocalDisk: ${database} database not opened`);\n      }\n      const uint: Uint8Array = await mDB.exportDB();\n      this._blob = await this.uint2blob(uint);\n      const dbName: string = `${database}SQLite.db`;\n      this._opts = {fileName: dbName, extensions:['.db'], startIn: 'documents',};\n      this._buttonSaveEl = document.createElement('button');\n      this._buttonSaveEl.setAttribute(\"id\",\"saveButton\");\n      this._buttonSaveEl.innerHTML = `${this.innerSaveText} ${dbName}`;\n      this._element.appendChild(this._buttonSaveEl);\n      this._buttonSaveEl.addEventListener(\"click\", this.saveFile.bind(this));\n      return Promise.resolve();\n    } catch (err:any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`SaveToLocalDisk: ${msg}`);\n    }\n  }\n  async _getFromLocalDiskToStore(overwrite: boolean): Promise<void> {\n\n    this._buttonPickEl = document.createElement('button');\n    this._buttonPickEl.setAttribute(\"id\",\"pickButton\");\n    this._buttonPickEl.innerHTML = `${this.innerPickText}`;\n    this._element.appendChild(this._buttonPickEl);\n    this._buttonPickEl.addEventListener(\"click\", this.pickDatabase.bind(this));\n    this._overwrite = overwrite;\n    return Promise.resolve();\n  }\n  private async pickDatabase() {\n    try {\n      const blob = await fileOpen({extensions: ['.db']});\n      let uInt8Array: Uint8Array = await this.blob2uint(blob);\n      const databaseName = this.removePathSuffix(blob.name);\n      const dbName = this.setPathSuffix(blob.name);\n      // check if dbName exists\n      const isExist: boolean = await UtilsStore.isDBInStore(dbName, this.store);\n      if (!isExist) {\n        await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n      } else  {\n        if(this._overwrite) {\n          await UtilsStore.removeDBFromStore(dbName, this.store);\n          await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n        } else {\n          this.PickDatabaseEnded.emit({message:`Error: cannot overwrite ${dbName}`});\n        }\n      }\n      this._element.removeChild(this._buttonPickEl);\n      this.PickDatabaseEnded.emit({db_name: databaseName});\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      this.PickDatabaseEnded.emit({message:msg});\n    }\n  }\n\n  private async saveFile() {\n    try {\n      await fileSave(this._blob,[this._opts]);\n      const databaseName = this._opts.fileName;\n      this._element.removeChild(this._buttonSaveEl);\n      this.SaveDatabaseEnded.emit({db_name: databaseName});\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      this.SaveDatabaseEnded.emit({message:msg});\n    }\n  }\n  private async _getVersion(database: string, readonly: boolean): Promise<SQLiteVersion> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Open: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `GetVersion: ${database} database not opened`);\n    }\n    try {\n      const version: number = await mDB.getVersion();\n      const ret: SQLiteVersion = {} as SQLiteVersion;\n      ret.version = version;\n      return Promise.resolve(ret);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Open: ${msg}`);\n    }\n  }\n  private async _beginTransaction(database:string):Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`BeginTransaction: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `BeginTransaction: ${database} database not opened`);\n    }\n    let changes: SQLiteChanges = {} as SQLiteChanges;\n    const ret: number = await mDB.beginTransaction();\n    changes = {changes: {changes: ret}};\n    return Promise.resolve(changes);\n  }\n  private async _commitTransaction(database:string):Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`CommitTransaction: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `CommitTransaction: ${database} database not opened`);\n    }\n    let changes: SQLiteChanges = {} as SQLiteChanges;\n    const ret: number = await mDB.commitTransaction();\n    changes = {changes: {changes: ret}};\n    return Promise.resolve(changes);\n  }\n  private async _rollbackTransaction(database:string):Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`RollbackTransaction: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `RollbackTransaction: ${database} database not opened`);\n    }\n    let changes: SQLiteChanges = {} as SQLiteChanges;\n    const ret: number = await mDB.rollbackTransaction();\n    changes = {changes: {changes: ret}};\n    return Promise.resolve(changes);\n  }\n  private async _isTransactionActive(database:string):Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`IsTransactionActive: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `IsTransactionActive: ${database} database not opened`);\n    }\n    let result: SQLiteResult = {} as SQLiteResult;\n    const res: boolean = mDB.isTransActive() ;\n    result = {result: res};\n    return Promise.resolve(result);\n  }\n  private async _execute(database:string, statements: string, transaction: boolean,\n                         readonly: boolean): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Execute: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `Execute: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`Execute: not allowed in read-only mode`);\n    }\n    let changes: SQLiteChanges = {} as SQLiteChanges;\n    const command = statements.substring(0,6);\n    if(this.innerAutoSave && command === \"COMMIT\" && this.innerTypeOrm) {\n      // fix issue for typeORM with autosave\n      changes = {changes: {changes: 0}};\n      return Promise.resolve(changes);\n    }\n    try {\n      const ret: number = await mDB.executeSQL(statements, transaction);\n      changes = {changes: {changes: ret}};\n      return Promise.resolve(changes);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Execute: ${msg}`);\n    }\n  }\n  private async _executeSet(database:string, setOfStatements: SQLiteSet[], transaction: boolean,\n                            readonly: boolean, returnMode: string): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`ExecuteSet: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `ExecuteSet: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`ExecuteSet: not allowed in read-only mode`);\n    }\n    for (const sStmt of setOfStatements) {\n      if (!('statement' in sStmt) || !('values' in sStmt)) {\n        return Promise.reject(\n          'ExecuteSet: Must provide a set as ' + 'Array of {statement,values}',\n        );\n      }\n    }\n    try {\n      const ret: any = await mDB.execSet(setOfStatements, transaction, returnMode);\n      const changes: SQLiteChanges = {changes: {changes: ret.changes, lastId: ret.lastId,\n                                      values: ret.values}};\n      return Promise.resolve(changes);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`ExecuteSet: ${msg}`);\n    }\n  }\n  private async _run(database: string, statement: string, values: any[], transaction: boolean,\n                    readonly: boolean, returnMode: string): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Run: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `Run: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`Run: not allowed in read-only mode`);\n    }\n    let changes: SQLiteChanges = {} as SQLiteChanges;\n    const command = statement.substring(0,6);\n    if(this.innerAutoSave && command === \"COMMIT\") {\n      // fix issue for typeORM with autosave\n      changes = {changes: {changes: 0}};\n      return Promise.resolve(changes);\n    }\n    try {\n      const ret: any = await mDB.runSQL(statement, values, transaction, returnMode);\n      changes = {changes: {changes: ret.changes, lastId: ret.lastId, values: ret.values}};\n\n      return Promise.resolve(changes);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Run: ${msg}`);\n    }\n  }\n  private async _query(database: string, statement: string, values: any[],\n                      readonly: boolean): Promise<SQLiteValues> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`Query: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `Query: ${database} database not opened`);\n    }\n    let ret: any[] = [];\n    const command = statement.substring(0,6);\n    if(this.innerAutoSave && command === \"COMMIT\") {\n      // fix issue for typeORM with autosave\n      return Promise.resolve({ values: ret });\n    }\n    try {\n      ret = await mDB.selectSQL(statement, values);\n      return Promise.resolve({ values: ret });\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`Query failed: ${msg}`);\n    }\n  }\n  private async _getTableList(database: string, readonly: boolean): Promise<SQLiteValues> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`GetTableList: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `GetTableList: ${database} database not opened`);\n    }\n    let ret: any[] = [];\n    try {\n      ret = await mDB.getTableNames();\n      return Promise.resolve({ values: ret });\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`GetTableList failed: ${msg}`);\n    }\n  }\n  private async _isDBExists(database:string, readonly: boolean): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`IsDBExists: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n/*    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `IsDBExists: ${database} database not opened`);\n    }\n    */\n    try {\n      const ret: boolean = await mDB.isDBExists(database + 'SQLite.db');\n      const result: SQLiteResult = {result: ret};\n      return Promise.resolve(result);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`IsDBExists: ${msg}`);\n    }\n\n  }\n  private async _isDBOpen(database:string, readonly: boolean): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`IsDBOpen: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      const result = {result: false};\n      return Promise.resolve(result);\n    }\n\n    try {\n      const ret: boolean = await mDB.isDBOpen(database + 'SQLite.db');\n      const result = {result: ret};\n      return Promise.resolve(result);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`IsDBOpen: ${msg}`);\n    }\n  }\n  private async _deleteDatabase(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`DeleteDatabase: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if(readonly) {\n      return Promise.reject(`DeleteDatabase: not allowed in read-only mode`);\n    }\n    try {\n      await mDB.deleteDB(database + 'SQLite.db');\n      return Promise.resolve();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`DeleteDatabase: ${msg}`);\n    }\n  }\n  private async _isTableExists(database: string, table: string,\n                              readonly: boolean): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(`IsTableExists: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `IsTableExists: ${database} database not opened`);\n    }\n    try {\n      const ret: boolean = await mDB.isTable(table);\n      const result = {result: ret};\n      return Promise.resolve(result);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`IsTableExists: ${msg}`);\n    }\n  }\n  private async _createSyncTable(database: string, readonly: boolean): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(\n        'CreateSyncTable: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `CreateSyncTable: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`CreateSyncTable: not allowed in read-only mode`);\n    }\n\n    try {\n      const ret: number = await mDB.createSyncTable();\n      return Promise.resolve({ changes: { changes: ret } });\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`CreateSyncTable: ${msg}`);\n    }\n  }\n  private async _getSyncDate(database: string, readonly: boolean): Promise<SQLiteSyncDate>  {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(\n        'GetSyncDate: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `GetSyncDate: ${database} database not opened`);\n    }\n    try {\n      const ret: number = await mDB.getSyncDate();\n      return Promise.resolve({syncDate:ret});\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`GetSyncDate: ${msg}`);\n    }\n\n  }\n  private async _setSyncDate(database: string, syncDate: string,\n                            readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(\n        'SetSyncDate: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `SetSyncDate: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`SetSyncDate: not allowed in read-only mode`);\n    }\n    try {\n      const ret = await mDB.setSyncDate(syncDate);\n      if(ret.result) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject(`SetSyncDate: ${ret.message}`);\n      }\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`SetSyncDate: ${msg}`);\n    }\n\n  }\n  async _isJsonValid(jsonStrObj: string): Promise<SQLiteResult> {\n    const jsonObj = JSON.parse(jsonStrObj);\n    const isValid = await UtilsJSON.isJsonSQLite(jsonObj);\n    if (!isValid) {\n      return Promise.reject('IsJsonValid: Stringify Json Object not Valid');\n    } else {\n      return Promise.resolve({ result: true });\n    }\n  }\n  async _importFromJson(jsonStrObj: string): Promise<SQLiteChanges> {\n    const jsonObj = JSON.parse(jsonStrObj);\n    const isValid = await UtilsJSON.isJsonSQLite(jsonObj);\n    if (!isValid) {\n      return Promise.reject('ImportFromJson: Stringify Json Object not Valid');\n    }\n    const vJsonObj: JsonSQLite = jsonObj;\n    const dbName = `${vJsonObj.database}SQLite.db`;\n    const dbVersion: number = vJsonObj.version ?? 1;\n    const mode: string = vJsonObj.mode;\n    const overwrite: boolean = vJsonObj.overwrite ?? false;\n    // Create the database\n    const mDb: Database = new Database(dbName, dbVersion, {}, this.store,\n                                       this.innerAutoSave, this.innerWasmPath);\n    try {\n      if(overwrite && mode === 'full') {\n        const isExists = UtilsStore.isDBInStore(dbName,this.store);\n        if(isExists) {\n          await UtilsStore.removeDBFromStore(dbName,this.store);\n        }\n      }\n      // Open the database\n      await mDb.open();\n      const tableList = await mDb.getTableNames();\n      if(mode === 'full' && tableList.length > 0) {\n        const curVersion = await mDb.getVersion();\n        if(dbVersion < curVersion) {\n          return Promise.reject(`ImportFromJson: Cannot import a version lower than ${curVersion}`);\n        }\n        if( curVersion === dbVersion) {\n          return Promise.resolve({ changes: { changes: 0 } });\n        }\n      }\n\n      // Import the JsonSQLite Object\n      const changes = await mDb.importJson(vJsonObj, this.importProgress);\n      // Close the database\n      await mDb.close();\n      return Promise.resolve({ changes: { changes: changes } });\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`ImportFromJson: ${msg}`);\n    }\n  }\n  async _exportToJson(database: string, exportMode: string,\n                      readonly: boolean): Promise<SQLiteJson> {\n    const keys = Object.keys(this._dbDict);\n    const connName = readonly ? \"RO_\" + database : \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(\n        'ExportToJson: No available connection for ' + `${database}`,\n      );\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `ExportToJson: ${database} database not opened`);\n    }\n    try {\n      const ret: any = await mDB.exportJson(exportMode, this.exportProgress);\n      const keys = Object.keys(ret);\n      if (keys.includes('message')) {\n        return Promise.reject(`ExportToJson: ${ret.message}`);\n      } else {\n        return Promise.resolve({ export: ret });\n      }\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`ExportToJson: ${msg}`);\n    }\n\n  }\n  async _deleteExportedRows(database: string, readonly: boolean): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    const connName = \"RW_\" + database;\n    if (!keys.includes(connName)) {\n      return Promise.reject(\n        'DeleteExportedRows: No available connection for ' + `${database}`,\n      );\n    }\n    const mDB = this._dbDict[connName];\n    if (!mDB.isDBOpen()) {\n      return Promise.reject(\n        `DeleteExportedRows: ${database} database not opened`);\n    }\n    if(readonly) {\n      return Promise.reject(`DeleteExportedRows: not allowed in read-only mode`);\n    }\n    try {\n      await mDB.deleteExportedRows();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`DeleteExportedRows: ${msg}`);\n    }\n  }\n\n  async _copyFromAssets(overwrite: boolean): Promise<void> {\n    const res = await this.loadJSON('/assets/databases/databases.json');\n    if(res != null) {\n      this.databaseList = JSON.parse(res);\n      const keys = Object.keys(this.databaseList);\n      if (keys.includes(\"databaseList\")) {\n        try {\n          for( const dbName of this.databaseList.databaseList) {\n            if( dbName.substring(dbName.length - 3) === \".db\") {\n              await this.copyDatabase(`/assets/databases/${dbName}`, overwrite);\n            }\n            if( dbName.substring(dbName.length - 4) === \".zip\") {\n              await this.unzipDatabase(`/assets/databases/${dbName}`, overwrite);\n            }\n          }\n          return Promise.resolve();\n        } catch (err: any) {\n          const msg = err.message ? err.message : err;\n          return Promise.reject(`CopyFromAssets: ${msg}`);\n        }\n      } else {\n        return Promise.reject(`CopyFromAssets: no key databaseList in databases.json`);\n      }\n    } else {\n      return Promise.reject(`CopyFromAssets: no databases.json file in /assets/databases folder`);\n    }\n  }\n  async _getFromHTTPRequest(url: string, overwrite: boolean): Promise<void> {\n    try {\n      let message: string;\n      if( url.substring(url.length - 3) === \".db\") {\n        await this.copyDatabase(url, overwrite);\n        message = \"db\";\n      }\n      if( url.substring(url.length - 4) === \".zip\") {\n        await this.unzipDatabase(url, overwrite);\n        message = \"zip\";\n      }\n      this.HTTPRequestEnded.emit({message:message});\n      return Promise.resolve();\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`GetFromHTTPRequest: ${msg}`);\n    }\n\n  }\n  async _isDatabase(database:string): Promise<SQLiteResult> {\n    try {\n      const ret: boolean = await UtilsStore.isDBInStore(database + 'SQLite.db',\n                                                        this.store);\n      const result: SQLiteResult = {result: ret};\n      return Promise.resolve(result);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`IsDatabase: ${msg}`);\n    }\n\n  }\n  async _getDatabaseList(): Promise<SQLiteValues> {\n    try {\n      const ret: string[] = await UtilsStore.getDBListFromStore(this.store);\n      const result: SQLiteValues = {values: ret};\n      return Promise.resolve(result);\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`GetDatabaseList: ${msg}`);\n    }\n  }\n  async _checkConnectionsConsistency(dbNames: string[], openModes: string[]): Promise<SQLiteResult> {\n    const ret: SQLiteResult = {} as SQLiteResult;\n    ret.result = false;\n    const dbConns: string[] = [];\n    dbNames.forEach((value, i) => {\n      dbConns.push(`${openModes[i]}_${value}`);\n    });\n    try {\n      let inConnectionsSet: Set<string> = new Set(Object.keys(this._dbDict));\n      const outConnectionSet: Set<string> = new Set(dbConns);\n      if(outConnectionSet.size === 0 ) {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n      if(inConnectionsSet.size < outConnectionSet.size) {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n      if(inConnectionsSet.size > outConnectionSet.size) {\n        const opt: SQLiteOptions = {} as SQLiteOptions;\n        for ( const key of inConnectionsSet) {\n          if(!Array.from(outConnectionSet.keys()).includes(key) ) {\n            let readonly = false;\n            if (key.substring(0,3) === \"RO_\") {\n              readonly = true;\n            }\n            opt.database = key.substring(3);\n            opt.readonly = readonly;\n            await this._closeConnection(opt.database, opt.readonly);\n          }\n        }\n      }\n      inConnectionsSet = new Set(Object.keys(this._dbDict));\n      if(inConnectionsSet.size === outConnectionSet.size) {\n        const symDiffSet = await this.symmetricDifference(inConnectionsSet,outConnectionSet);\n        if(symDiffSet.size === 0) {\n          ret.result = true;\n          return Promise.resolve(ret);\n        } else {\n          await this._resetDbDict(Object.keys(this._dbDict));\n          return Promise.resolve(ret);\n          }\n      } else {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`CheckConnectionsConsistency: ${msg}`);\n    }\n  }\n  private async _resetDbDict(keys: string[]): Promise<void> {\n    try {\n      for (const key of keys) {\n        const opt: SQLiteOptions = {} as SQLiteOptions;\n        let readonly = false;\n        if (key.substring(0,3) === \"RO_\") {\n          readonly = true;\n        }\n        opt.database = key.substring(3);\n        opt.readonly = readonly;\n        await this._closeConnection(opt.database, opt.readonly);\n      }\n    } catch (err: any) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(`ResetDbDict: ${msg}`);\n    }\n\n  }\n  private async symmetricDifference(setA: Set<string>, setB: Set<string>): Promise<Set<string>> {\n    let _difference: Set<string> = new Set()\n    setA.forEach(element => {\n      _difference.add(element.substring(3));\n    });\n    let _compare: Set<string> = new Set()\n    setB.forEach(element => {\n      _compare.add(element.substring(3));\n    });\n    for (const elem of _compare) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\nprivate async unzipDatabase(dbZipName: string, overwrite: boolean): Promise<void> {\n  return new Promise ((resolve,reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', dbZipName, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onerror = () => {\n      reject(new Error(`unzipDatabase: failed`));\n    }\n    xhr.onload =  () => {\n\n      JSZip.loadAsync(xhr.response).then( async (zip) => {\n        const keys = Object.keys(zip.files);\n        try {\n          // loop through file in the zip\n          for (const filename of keys) {\n            await this.retrieveDBFromZip(zip.files,filename,overwrite);\n          }\n          resolve();\n        } catch (err: any) {\n          const msg = err.message ? err.message : err;\n          reject(new Error(`unzipDatabase Error: ${msg}`));\n        }\n      });\n    };\n    xhr.send();\n  });\n}\n  private async retrieveDBFromZip(zipFiles: {[key: string]: JSZip.JSZipObject}, fileName: string, overwrite: boolean ): Promise<void> {\n    return new Promise ((resolve,reject) => {\n      zipFiles[fileName].async('nodebuffer').then(async (fileData) => {\n        try {\n          const uInt8Array = new Uint8Array(fileData);\n          const dbName = this.setPathSuffix(fileName);\n          // check if dbName exists\n          const isExist: boolean = await UtilsStore.isDBInStore(dbName, this.store);\n          if (!isExist) {\n            await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n          } else  {\n            if(overwrite) {\n              await UtilsStore.removeDBFromStore(dbName, this.store);\n              await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n              } else {\n              reject(new Error(`retrieveDBFromZip: cannot overwrite ${dbName}`));\n            }\n          }\n          resolve();\n        } catch (err: any) {\n          const msg = err.message ? err.message : err;\n          reject(new Error(`retrieveDBFromZip:: ${msg}`));\n        }\n      });\n    });\n  }\n  private async copyDatabase(dbInName: string, overwrite: boolean): Promise<void> {\n    return new Promise ((resolve,reject) => {\n      var xhr = new XMLHttpRequest();\n      var uInt8Array: Uint8Array;\n      xhr.open('GET', dbInName, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onerror = () => {\n        reject(new Error(`CopyDatabase: failed`));\n      }\n      xhr.onload =  () => {\n          uInt8Array = new Uint8Array(xhr.response);\n      };\n      xhr.onloadend= async () => {\n        const dbName = this.setPathSuffix(dbInName);\n        // check if dbName exists\n        const isExist: boolean = await UtilsStore.isDBInStore(dbName, this.store);\n        if (!isExist) {\n          await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n        } else  {\n          if(overwrite) {\n            await UtilsStore.removeDBFromStore(dbName, this.store);\n            await UtilsStore.saveDBToStore(dbName, uInt8Array, this.store);\n          } else {\n            reject(new Error(`CopyDatabase Error: cannot overwrite ${dbName}`));\n          }\n        }\n        resolve();\n      };\n      xhr.send();\n    });\n  }\n  private async loadJSON(jsonFileName: string): Promise<string> {\n    return new Promise ((resolve,reject) => {\n      var xobj = new XMLHttpRequest();\n      xobj.overrideMimeType(\"application/json\");\n      xobj.open('GET', jsonFileName, true);\n      xobj.onerror = () => {\n        reject(new Error(`LoadJSON: failed`));\n      }\n\n      xobj.onreadystatechange = function () {\n        if(xobj.status == 404) resolve(null);\n        if (xobj.readyState == 4 && xobj.status == 200) {\n        // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n        resolve(xobj.responseText);\n        }\n      };\n      xobj.send(null);\n    });\n  }\n  private async openStore(dbName: string, tableName: string): Promise<boolean> {\n    let ret = false;\n    const config: any = this.setConfig(dbName, tableName);\n    this.store = localForage.createInstance(config);\n    if (this.store != null) {\n      this.storeName = dbName;\n      ret = true;\n    }\n    return ret;\n  }\n\n  private setConfig(dbName: string, tableName: string): any {\n    const config: any = {\n      name: dbName,\n      storeName: tableName,\n      driver: [localForage.INDEXEDDB],\n      version: 1,\n    };\n    return config;\n  }\n  private removePathSuffix(db:string): string {\n    return db.includes(\"SQLite.db\") ?\n            db.split(\"SQLite.db\")[0] :\n            db.substring(db.length -3) === \".db\" ?\n            db.slice(0,db.lastIndexOf(\".\")) :\n            db;\n  }\n  private setPathSuffix(db: string): string {\n    let toDb: string = db.slice(db.lastIndexOf(\"/\") + 1);\n    const ext: string = \".db\";\n    if(db.substring(db.length -3) === ext) {\n      if(!db.includes(\"SQLite.db\")) {\n        toDb = db.slice(db.lastIndexOf(\"/\") + 1, -3) + 'SQLite.db';\n      }\n    }\n    return toDb;\n  }\n  private async blob2uint(blob: Blob): Promise<Uint8Array> {\n    return new Response(blob).arrayBuffer().then(buffer=>{\n        const uint: Uint8Array = new Uint8Array(buffer);\n        return uint;\n    });\n  }\n  private async uint2blob(uint: Uint8Array): Promise<Blob> {\n    const blob: Blob = new Blob([uint.buffer]);\n\n    return Promise.resolve(blob);\n  }\n\n  render() {\n    return ;\n  }\n}\n"]}