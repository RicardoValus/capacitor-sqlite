{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface EchoOptions {\n  /**\n   *  String to be echoed\n   */\n  value?: string;\n}\nexport interface ConnectionOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * The database  version\n   */\n  version?: number;\n  /**\n   * Set to true (database encryption) / false\n   */\n  encrypted?: boolean;\n  /**\n   * Set the mode for database encryption\n   * [\"encryption\", \"secret\", \"newsecret\"]\n   */\n  mode?: string;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n\n}\nexport interface AllConnectionsOptions {\n  /**\n   * the dbName of all connections\n   */\n  dbNames?: string[];\n  /**\n   * the openMode (\"RW\" read&write, \"RO\" readonly) of all connections\n   */\n\n  openModes?: string[];\n}\nexport interface SQLiteOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n}\nexport interface SQLiteExecuteOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * The batch of raw SQL statements as string\n   */\n  statements?: string;\n  /**\n   * Enable / Disable transactions\n   * default Enable (true)\n   */\n  transaction?: boolean;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n\n}\nexport interface SQLiteSetOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * The batch of raw SQL statements as Array of capSQLLiteSet\n   */\n  set?: SQLiteSet[];\n  /**\n   * Enable / Disable transactions\n   * default Enable (true)\n   */\n  transaction?: boolean;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n  /**\n   * return mode\n   * default 'no'\n   * value 'all'\n   * value 'one' for Electron platform\n   * @since 5.0.5-3\n   */\n  returnMode?: string;\n\n}\nexport interface SQLiteRunOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * A statement\n   */\n  statement?: string;\n  /**\n   * A set of values for a statement\n   */\n  values?: any[];\n  /**\n   * Enable / Disable transactions\n   * default Enable (true)\n   */\n  transaction?: boolean;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n  /**\n   * return mode\n   * default 'no'\n   * value 'all'\n   * value 'one' for Electron platform\n   * @since 5.0.5-3\n   */\n  returnMode?: string;\n\n}\nexport interface SQLiteQueryOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * A statement\n   */\n  statement?: string;\n  /**\n   * A set of values for a statement\n   */\n  values?: any[];\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n}\nexport interface SQLiteSyncDateOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * Set the synchronization date\n   * Format yyyy-MM-dd'T'HH:mm:ss.SSSZ\n   */\n  syncdate?: string;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n}\nexport interface SQLiteTableOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * The table name\n   */\n  table?: string;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n}\n\nexport interface SQLiteImportOptions {\n  /**\n   * Set the JSON object to import\n   *\n   */\n  jsonstring?: string;\n}\nexport interface SQLiteExportOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * Set the mode to export JSON Object:\n   * \"full\" or \"partial\"\n   *\n   */\n  jsonexportmode?: string;\n  /**\n   * Set to true (database in read-only mode) / false\n   */\n  readonly?: boolean;\n}\nexport interface SQLiteUpgradeOptions {\n  /**\n   * The database name\n   */\n  database?: string;\n  /**\n   * The upgrade options for version upgrade\n   * Array of length 1 to easiest the iOS plugin\n   */\n  upgrade?: SQLiteVersionUpgrade[];\n}\nexport interface SQLiteVersionUpgrade {\n  toVersion: number;\n  statements: string[];\n}\n\nexport interface SQLiteSet {\n  /**\n   * A statement\n   */\n  statement?: string;\n  /**\n   * the data values list as an Array\n   */\n  values?: any[];\n}\nexport interface SQLiteHTTPOptions {\n  /**\n   * The url\n   */\n  url?: string;\n  /**\n   * the overwrite value true/false default true\n   */\n  overwrite?: boolean;\n}\nexport interface SQLiteLocalDiskOptions {\n  /**\n   * the overwrite value true/false default true\n   */\n  overwrite?: boolean;\n}\nexport interface EchoResult {\n  /**\n   * String returned\n   */\n  value?: string;\n}\nexport interface SQLiteResult {\n  /**\n   * result set to true when successful else false\n   */\n  result?: boolean;\n}\nexport interface SQLiteVersion {\n  /**\n   * the returned database version\n   */\n  version?: number;\n}\n\nexport interface SQLiteChanges {\n  /**\n   * a returned Changes\n   */\n  changes?: Changes;\n}\nexport interface Changes {\n  /**\n   * the number of changes from an execute or run command\n   */\n  changes?: number;\n  /**\n   * the lastId created from a run command\n   */\n  lastId?: number;\n  /**\n   * values when RETURNING\n   */\n  values?: any[];\n\n}\nexport interface SQLiteValues {\n  /**\n   * the data values list as an Array\n   */\n  values?: any[];\n}\nexport interface SQLiteSyncDate {\n  /**\n   * the synchronization date\n   */\n  syncDate?: number;\n}\nexport interface  SQLiteFromAssetsOptions {\n  /**\n   * the overwrite value true/false default true\n   */\n  overwrite?: boolean;\n}\nexport interface SQLiteJson {\n  /**\n   * an export JSON object\n   */\n  export?: JsonSQLite;\n}\n/* JSON Types */\nexport interface JsonSQLite {\n  /**\n   * The database name\n   */\n  database: string;\n  /**\n   *  The database version\n   */\n  version: number;\n  /**\n   * Delete the database prior to import (default false)\n   */\n  overwrite?: boolean;\n   /**\n   * Set to true (database encryption) / false\n   */\n  encrypted: boolean;\n  /***\n   * Set the mode\n   * [\"full\", \"partial\"]\n   */\n  mode: string;\n  /***\n   * Array of Table (JsonTable)\n   */\n  tables: JsonTable[];\n  /***\n   * Array of View (JsonView)\n   */\n  views?: JsonView[];\n  }\nexport interface JsonTable {\n  /**\n   * The database name\n   */\n  name: string;\n  /***\n   * Array of Schema (JsonColumn)\n   */\n  schema?: JsonColumn[];\n  /***\n   * Array of Index (JsonIndex)\n   */\n  indexes?: JsonIndex[];\n  /***\n   * Array of Trigger (JsonTrigger)\n   */\n  triggers?: JsonTrigger[];\n  /***\n   * Array of Table data\n   */\n  values?: any[][];\n}\nexport interface JsonColumn {\n  /**\n   * The column name\n   */\n  column?: string;\n  /**\n   * The column data (type, unique, ...)\n   */\n  value: string;\n  /**\n   * The column foreign key constraints\n   */\n  foreignkey?: string;\n   /**\n   * the column constraint\n   */\n  constraint?: string;\n}\nexport interface JsonTrigger {\n  /**\n   * The trigger name\n   */\n  name: string;\n  /**\n   * The trigger time event fired\n   */\n  timeevent: string;\n\n  /**\n   * The trigger condition\n   */\n  condition?: string;\n\n  /**\n   * The logic of the trigger\n   */\n  logic: string;\n}\nexport interface JsonIndex {\n  /**\n   * The index name\n   */\n  name: string;\n  /**\n   * The value of the index can have the following formats:\n   * email\n   * email ASC\n   * email, MobileNumber\n   * email ASC, MobileNumber DESC\n   */\n  value: string;\n  /**\n   * the mode (Optional)\n   * UNIQUE\n   */\n  mode?: string;\n}\nexport interface JsonProgressListener {\n  /**\n   * Progress message\n   */\n  progress?: string;\n}\nexport interface HTTPRequestEndedListener {\n  /**\n   * Message\n   */\n  message?: string;\n}\nexport interface PickOrSaveDatabaseEndedListener {\n  /**\n   * Pick Database's name\n   */\n  db_name?: string;\n  /**\n   * Message\n   */\n  message?: string;\n}\nexport interface ButtonOptions {\n  top?: string;\n  right?: string;\n  color?: string;\n  backgroundColor?: string;\n  fontSize?: string;\n  padding?: string;\n}\n\nexport interface JsonView {\n  /**\n   * The view name\n   */\n  name: string;\n  /**\n   * The view statement\n   */\n  value: string;\n}\n"]}